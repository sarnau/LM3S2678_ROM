
@ ---------------------------------------------------------------------------

@ enum eHardwareDetect, mappedto_26
eHardwareDetect_nothing: .equ 0
eHardwareDetect_UART: .equ 1
eHardwareDetect_SSI: .equ 2
eHardwareDetect_I2C: .equ 3

@
@ +-------------------------------------------------------------------------+
@ |      This file was generated by The Interactive Disassembler (IDA)      |
@ |           Copyright (c) 2018 Hex-Rays, <support@hex-rays.com>           |
@ |                      License info: 48-3051-7314-20                      |
@ |                     Markus Fritze, Personal license                     |
@ +-------------------------------------------------------------------------+
@
@ Input SHA256 : 09FE8CDBFAB752E2BE8074181320414322010EC868CD23BBCF766D282A3107F7
@ Input MD5    : C975307B116BB273D5A1DDF29BEB256D
@ Input CRC32  : 0BC3080F

@ File Name   : ~/Desktop/LM3S2678_ROM_01000000.bin
@ Format      : Binary file
@ Base Address: 0000h Range: 1000000h - 1002C00h Loaded length: 2C00h

@ Processor       : ARM
@ ARM architecture: ARMv7-M
@ Target assembler: GNU assembler
@ Byte sex        : Little endian
.syntax unified

@ ===========================================================================

@ Segment type: Pure code
                .section ROM@ CODE
                @ .org 0x1000000
                .code 32
ROM_BASE:       .long stack_top         @ DATA XREF: init_ram_and_vector_table+14↓o
                                        @ init_ram_and_vector_table+1A↓o ...
                .long __RESET_ROM_Update__+1
                .long __NMI__+1
                .long __HARD_FAULT__+1
ROM_VERSION:    .long 0x25
                .long ROM_UARTTABLE
                .long ROM_SSITABLE
                .long ROM_I2CTABLE
                .long ROM_GPIOTABLE
                .long ROM_ADCTABLE
                .long ROM_COMPARATORTABLE
                .long ROM_FLASHTABLE
                .long ROM_PWMTABLE
                .long ROM_QEITABLE
                .long ROM_SYSTICKTABLE
                .long ROM_TIMERTABLE
                .long ROM_WATCHDOGTABLE
                .long ROM_SYSCTLTABLE
                .long ROM_INTERRUPTTABLE
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
ROM_ADCTABLE:   .long ROM_ADCSequenceDataGet+1
                                        @ DATA XREF: ROM:01000024↑o
                .long ROM_ADCIntDisable+1
                .long ROM_ADCIntEnable+1
                .long ROM_ADCIntStatus+1
                .long ROM_ADCIntClear+1
                .long ROM_ADCSequenceEnable+1
                .long ROM_ADCSequenceDisable+1
                .long ROM_ADCSequenceConfigure+1
                .long ROM_ADCSequenceStepConfigure+1
                .long ROM_ADCSequenceOverflow+1
                .long ROM_ADCSequenceOverflowClear+1
                .long ROM_ADCSequenceUnderflow+1
                .long ROM_ADCSequenceUnderflowClear+1
                .long ROM_ADCProcessorTrigger+1
                .long ROM_ADCHardwareOversampleConfigure+1
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
ROM_COMPARATORTABLE:.long ROM_ComparatorIntClear+1
                                        @ DATA XREF: ROM:01000028↑o
                .long ROM_ComparatorConfigure+1
                .long ROM_ComparatorRefSet+1
                .long ROM_ComparatorValueGet+1
                .long ROM_ComparatorIntEnable+1
                .long ROM_ComparatorIntDisable+1
                .long ROM_ComparatorIntStatus+1
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
ROM_FLASHTABLE: .long ROM_FlashProgram+1 @ DATA XREF: ROM:0100002C↑o
                .long ROM_FlashUsecGet+1
                .long ROM_FlashUsecSet+1
                .long ROM_FlashErase+1
                .long ROM_FlashProtectGet+1
                .long ROM_FlashProtectSet+1
                .long ROM_FlashProtectSave+1
                .long ROM_FlashUserGet+1
                .long ROM_FlashUserSet+1
                .long ROM_FlashUserSave+1
                .long ROM_FlashIntEnable+1
                .long ROM_FlashIntDisable+1
                .long ROM_FlashIntStatus+1
                .long ROM_FlashIntClear+1
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
ROM_GPIOTABLE:  .long ROM_GPIOPinWrite+1 @ DATA XREF: ROM:01000020↑o
                .long ROM_GPIODirModeSet+1
                .long ROM_GPIODirModeGet+1
                .long ROM_GPIOIntTypeSet+1
                .long ROM_GPIOIntTypeGet+1
                .long ROM_GPIOPadConfigSet+1
                .long ROM_GPIOPadConfigGet+1
                .long ROM_GPIOPinIntEnable+1
                .long ROM_GPIOPinIntDisable+1
                .long ROM_GPIOPinIntStatus+1
                .long ROM_GPIOPinIntClear+1
                .long ROM_GPIOPinRead+1
                .long ROM_GPIOPinTypeCAN+1
                .long ROM_GPIOPinTypeComparator+1
                .long ROM_GPIOPinTypeGPIOInput+1
                .long ROM_GPIOPinTypeGPIOOutput+1
                .long ROM_GPIOPinTypeI2C+1
                .long ROM_GPIOPinTypePWM+1
                .long ROM_GPIOPinTypeQEI+1
                .long ROM_GPIOPinTypeSSI+1
                .long ROM_GPIOPinTypeTimer+1
                .long ROM_GPIOPinTypeUART+1
                .long ROM_GPIOPinTypeGPIOOutputOD+1
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
ROM_I2CTABLE:   .long ROM_I2CMasterDataPut+1 @ DATA XREF: ROM:0100001C↑o
                .long ROM_I2CMasterInitExpClk+1
                .long ROM_I2CSlaveInit+1
                .long ROM_I2CMasterEnable+1
                .long ROM_I2CSlaveEnable+1
                .long ROM_I2CMasterDisable+1
                .long ROM_I2CSlaveDisable+1
                .long ROM_I2CMasterIntEnable+1
                .long ROM_I2CSlaveIntEnable+1
                .long ROM_I2CMasterIntDisable+1
                .long ROM_I2CSlaveIntDisable+1
                .long ROM_I2CMasterIntStatus+1
                .long ROM_I2CSlaveIntStatus+1
                .long ROM_I2CMasterIntClear+1
                .long ROM_I2CSlaveIntClear+1
                .long ROM_I2CMasterSlaveAddrSet+1
                .long ROM_I2CMasterBusy+1
                .long ROM_I2CMasterBusBusy+1
                .long ROM_I2CMasterControl+1
                .long ROM_I2CMasterErr+1
                .long ROM_I2CMasterDataGet+1
                .long ROM_I2CSlaveStatus+1
                .long ROM_I2CSlaveDataPut+1
                .long ROM_I2CSlaveDataGet+1
                .long ROM_UpdateI2C+1
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
ROM_INTERRUPTTABLE:.long ROM_IntEnable+1 @ DATA XREF: ROM:01000048↑o
                .long ROM_IntMasterEnable+1
                .long ROM_IntMasterDisable+1
                .long ROM_IntDisable+1
                .long ROM_IntPriorityGroupingSet+1
                .long ROM_IntPriorityGroupingGet+1
                .long ROM_IntPrioritySet+1
                .long ROM_IntPriorityGet+1
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
ROM_PWMTABLE:   .long ROM_PWMPulseWidthSet+1 @ DATA XREF: ROM:01000030↑o
                .long ROM_PWMGenConfigure+1
                .long ROM_PWMGenPeriodSet+1
                .long ROM_PWMGenPeriodGet+1
                .long ROM_PWMGenEnable+1
                .long ROM_PWMGenDisable+1
                .long ROM_PWMPulseWidthGet+1
                .long ROM_PWMDeadBandEnable+1
                .long ROM_PWMDeadBandDisable+1
                .long ROM_PWMSyncUpdate+1
                .long ROM_PWMSyncTimeBase+1
                .long ROM_PWMOutputState+1
                .long ROM_PWMOutputInvert+1
                .long ROM_PWMOutputFault+1
                .long ROM_PWMGenIntTrigEnable+1
                .long ROM_PWMGenIntTrigDisable+1
                .long ROM_PWMGenIntStatus+1
                .long ROM_PWMGenIntClear+1
                .long ROM_PWMIntEnable+1
                .long ROM_PWMIntDisable+1
                .long ROM_PWMFaultIntClear+1
                .long ROM_PWMIntStatus+1
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
ROM_QEITABLE:   .long ROM_QEIPositionGet+1 @ DATA XREF: ROM:01000034↑o
                .long ROM_QEIEnable+1
                .long ROM_QEIDisable+1
                .long ROM_QEIConfigure+1
                .long ROM_QEIPositionSet+1
                .long ROM_QEIDirectionGet+1
                .long ROM_QEIErrorGet+1
                .long ROM_QEIVelocityEnable+1
                .long ROM_QEIVelocityDisable+1
                .long ROM_QEIVelocityConfigure+1
                .long ROM_QEIVelocityGet+1
                .long ROM_QEIIntEnable+1
                .long ROM_QEIIntDisable+1
                .long ROM_QEIIntStatus+1
                .long ROM_QEIIntClear+1
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
ROM_SSITABLE:   .long ROM_SSIDataPut+1  @ DATA XREF: ROM:01000018↑o
                .long ROM_SSIConfigSetExpClk+1
                .long ROM_SSIEnable+1
                .long ROM_SSIDisable+1
                .long ROM_SSIIntEnable+1
                .long ROM_SSIIntDisable+1
                .long ROM_SSIIntStatus+1
                .long ROM_SSIIntClear+1
                .long ROM_SSIDataPutNonBlocking+1
                .long ROM_SSIDataGet+1
                .long ROM_SSIDataGetNonBlocking+1
                .long ROM_UpdateSSI+1
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
ROM_SYSCTLTABLE:.long ROM_SysCtlSleep+1 @ DATA XREF: ROM:01000044↑o
                .long ROM_SysCtlSRAMSizeGet+1
                .long ROM_SysCtlFlashSizeGet+1
                .long ROM_SysCtlPinPresent+1
                .long ROM_SysCtlPeripheralPresent+1
                .long ROM_SysCtlPeripheralReset+1
                .long ROM_SysCtlPeripheralEnable+1
                .long ROM_SysCtlPeripheralDisable+1
                .long ROM_SysCtlPeripheralSleepEnable+1
                .long ROM_SysCtlPeripheralSleepDisable+1
                .long ROM_SysCtlPeripheralDeepSleepEnable+1
                .long ROM_SysCtlPeripheralDeepSleepDisable+1
                .long ROM_SysCtlPeripheralClockGating+1
                .long ROM_SysCtlIntEnable+1
                .long ROM_SysCtlIntDisable+1
                .long ROM_SysCtlIntClear+1
                .long ROM_SysCtlIntStatus+1
                .long ROM_SysCtlLDOSet+1
                .long ROM_SysCtlLDOGet+1
                .long ROM_SysCtlReset+1
                .long ROM_SysCtlDeepSleep+1
                .long ROM_SysCtlResetCauseGet+1
                .long ROM_SysCtlResetCauseClear+1
                .long ROM_SysCtlClockSet+1
                .long ROM_SysCtlClockGet+1
                .long ROM_SysCtlPWMClockSet+1
                .long ROM_SysCtlPWMClockGet+1
                .long ROM_SysCtlADCSpeedSet+1
                .long ROM_SysCtlADCSpeedGet+1
                .long ROM_SysCtlGPIOAHBEnable+1
                .long ROM_SysCtlGPIOAHBDisable+1
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
ROM_SYSTICKTABLE:.long ROM_SysTickValueGet+1 @ DATA XREF: ROM:01000038↑o
                .long ROM_SysTickEnable+1
                .long ROM_SysTickDisable+1
                .long ROM_SysTickIntEnable+1
                .long ROM_SysTickIntDisable+1
                .long ROM_SysTickPeriodSet+1
                .long ROM_SysTickPeriodGet+1
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
ROM_TIMERTABLE: .long ROM_TimerIntClear+1 @ DATA XREF: ROM:0100003C↑o
                .long ROM_TimerEnable+1
                .long ROM_TimerDisable+1
                .long ROM_TimerConfigure+1
                .long ROM_TimerControlLevel+1
                .long ROM_TimerControlTrigger+1
                .long ROM_TimerControlStall+1
                .long ROM_TimerRTCEnable+1
                .long ROM_TimerRTCDisable+1
                .long ROM_TimerPrescaleSet+1
                .long ROM_TimerPrescaleGet+1
                .long ROM_TimerPrescaleMatchSet+1
                .long ROM_TimerPrescaleMatchGet+1
                .long ROM_TimerLoadSet+1
                .long ROM_TimerLoadGet+1
                .long ROM_TimerValueGet+1
                .long ROM_TimerMatchSet+1
                .long ROM_TimerMatchGet+1
                .long ROM_TimerIntEnable+1
                .long ROM_TimerIntDisable+1
                .long ROM_TimerIntStatus+1
                .long ROM_TimerControlWaitOnTrigger+1
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
ROM_UARTTABLE:  .long ROM_UARTCharPut+1 @ DATA XREF: ROM:01000014↑o
                .long ROM_UARTParityModeSet+1
                .long ROM_UARTParityModeGet+1
                .long ROM_UARTFIFOLevelSet+1
                .long ROM_UARTFIFOLevelGet+1
                .long ROM_UARTConfigSetExpClk+1
                .long ROM_UARTConfigGetExpClk+1
                .long ROM_UARTEnable+1
                .long ROM_UARTDisable+1
                .long ROM_UARTEnableSIR+1
                .long ROM_UARTDisableSIR+1
                .long ROM_UARTCharsAvail+1
                .long ROM_UARTSpaceAvail+1
                .long ROM_UARTCharGetNonBlocking+1
                .long ROM_UARTCharGet+1
                .long ROM_UARTCharPutNonBlocking+1
                .long ROM_UARTBreakCtl+1
                .long ROM_UARTIntEnable+1
                .long ROM_UARTIntDisable+1
                .long ROM_UARTIntStatus+1
                .long ROM_UARTIntClear+1
                .long ROM_UpdateUART+1
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
ROM_WATCHDOGTABLE:.long ROM_WatchdogIntClear+1
                                        @ DATA XREF: ROM:01000040↑o
                .long ROM_WatchdogRunning+1
                .long ROM_WatchdogEnable+1
                .long ROM_WatchdogResetEnable+1
                .long ROM_WatchdogResetDisable+1
                .long ROM_WatchdogLock+1
                .long ROM_WatchdogUnlock+1
                .long ROM_WatchdogLockState+1
                .long ROM_WatchdogReloadSet+1
                .long ROM_WatchdogReloadGet+1
                .long ROM_WatchdogValueGet+1
                .long ROM_WatchdogIntEnable+1
                .long ROM_WatchdogIntStatus+1
                .long ROM_WatchdogStallEnable+1
                .long ROM_WatchdogStallDisable+1
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .long 0xFFFFFFFD
                .code 16

@ =============== S U B R O U T I N E =======================================


@ void init_ram_and_vector_table(void)
init_ram_and_vector_table:              @ CODE XREF: __RESET_ROM_Update__↓p
                                        @ ROM_UpdateI2C↓p ...
                MOV.W   R0, #VTOR_TABLE_IN_SRAM
                MOV.W   R1, #0x800
                MOVS    R2, #0

loc_10006AA:                            @ CODE XREF: init_ram_and_vector_table+10↓j
                STR.W   R2, [R0],#4
                SUBS    R1, R1, #4
                Bne     loc_10006AA
                MOV     SP, R0
                LDR     R0, =ROM_BASE   @ copy vectors into SRAM
                MOV.W   R1, #VTOR_TABLE_IN_SRAM
                LDM.W   R0, {R2-R5}
                STM.W   R1, {R2-R5}
                LDR     R0, =0xE000ED08 @ VTOR
                STR     R1, [R0]
                BX      LR
@ End of function init_ram_and_vector_table

                .code 32

@ =============== S U B R O U T I N E =======================================


__RESET_ROM_Update__:                   @ DATA XREF: ROM:01000004↑o
                BL      init_ram_and_vector_table
                BL      BootLoader_detect_hardware
                BL      BootLoader_setup_communication
                B.W     BootLoader_receive_packets
@ End of function __RESET_ROM_Update__


@ =============== S U B R O U T I N E =======================================


ROM_UpdateI2C:                          @ DATA XREF: ROM:01000270↑o
                BL      init_ram_and_vector_table
                BL      BootLoader_setup_communication_i2c
                B.W     BootLoader_receive_packets
@ End of function ROM_UpdateI2C


@ =============== S U B R O U T I N E =======================================


ROM_UpdateSSI:                          @ DATA XREF: ROM:010003DC↑o
                BL      init_ram_and_vector_table
                BL      BootLoader_setup_communication_ssi
                B.W     BootLoader_receive_packets
@ End of function ROM_UpdateSSI


@ =============== S U B R O U T I N E =======================================


ROM_UpdateUART:                         @ DATA XREF: ROM:01000614↑o
                BL      init_ram_and_vector_table
                BL      BootLoader_setup_communication_uart
                B.W     BootLoader_receive_packets
@ End of function ROM_UpdateUART

                .code 16

@ =============== S U B R O U T I N E =======================================

@ Attributes: noreturn

__NMI__:                                @ CODE XREF: __NMI__↓j
                                        @ DATA XREF: ROM:01000008↑o
                B       __NMI__
@ End of function __NMI__


@ =============== S U B R O U T I N E =======================================

@ Attributes: noreturn

__HARD_FAULT__:                         @ CODE XREF: __HARD_FAULT__↓j
                                        @ DATA XREF: ROM:0100000C↑o
                B       __HARD_FAULT__
@ End of function __HARD_FAULT__

@ ---------------------------------------------------------------------------
off_1000700:    .long ROM_BASE          @ DATA XREF: init_ram_and_vector_table+14↑r
off_1000704:    .long 0xE000ED08        @ DATA XREF: init_ram_and_vector_table+22↑r

@ =============== S U B R O U T I N E =======================================


delay_loop_r0:                          @ CODE XREF: delay_loop_r0+2↓j
                                        @ ROM_SysCtlClockSet:loc_100147E↓p ...
                SUBS    R0, #1
                Bne     delay_loop_r0
                BX      LR
@ End of function delay_loop_r0

@ ---------------------------------------------------------------------------
                .short 0
                .code 32

@ =============== S U B R O U T I N E =======================================


ROM_ADCIntDisable:                      @ DATA XREF: ROM:01000094↑o
                LDR     R2, [R0,#8]
                MOVS    R3, #1
                LSL.W   R1, R3, R1
                BIC.W   R1, R2, R1
                STR     R1, [R0,#8]
                BX      LR
@ End of function ROM_ADCIntDisable


@ =============== S U B R O U T I N E =======================================


ROM_ADCIntEnable:                       @ DATA XREF: ROM:01000098↑o
                MOVS    R2, #1
                LSL.W   R1, R2, R1
                STR     R1, [R0,#0xC]
                LDR     R2, [R0,#8]
                ORRS    R1, R2
                STR     R1, [R0,#8]
                BX      LR
@ End of function ROM_ADCIntEnable


@ =============== S U B R O U T I N E =======================================


ROM_ADCIntStatus:                       @ DATA XREF: ROM:0100009C↑o
                MOVS    R3, #1
                LSL.W   R1, R3, R1
                CMP     R2, #0
                ITE eq
                LDReq   R0, [R0,#4]
                LDRne   R0, [R0,#0xC]
                ANDS    R0, R1
                BX      LR
@ End of function ROM_ADCIntStatus


@ =============== S U B R O U T I N E =======================================


ROM_ADCIntClear:                        @ DATA XREF: ROM:010000A0↑o
                MOVS    R2, #1
                LSL.W   R1, R2, R1
                STR     R1, [R0,#0xC]
                BX      LR
@ End of function ROM_ADCIntClear


@ =============== S U B R O U T I N E =======================================


ROM_ADCSequenceEnable:                  @ DATA XREF: ROM:010000A4↑o
                LDR     R2, [R0]
                MOVS    R3, #1
                LSL.W   R1, R3, R1
                ORRS    R1, R2
                STR     R1, [R0]
                BX      LR
@ End of function ROM_ADCSequenceEnable


@ =============== S U B R O U T I N E =======================================


ROM_ADCSequenceDisable:                 @ DATA XREF: ROM:010000A8↑o
                LDR     R2, [R0]
                MOVS    R3, #1
                LSL.W   R1, R3, R1
                BIC.W   R1, R2, R1
                STR     R1, [R0]
                BX      LR
@ End of function ROM_ADCSequenceDisable

                .code 16

@ =============== S U B R O U T I N E =======================================


ROM_ADCSequenceConfigure:               @ DATA XREF: ROM:010000AC↑o
                PUSH    {R4}
                LDR     R4, [R0,#0x14]
                LSLS    R1, R1, #2
                MOV.W   R12, #0xF
                LSL.W   R12, R12, R1
                AND.W   R2, R2, #0xF
                BIC.W   R4, R4, R12
                LSLS    R2, R1
                ORRS    R2, R4
                STR     R2, [R0,#0x14]
                LDR     R2, [R0,#0x20]
                AND.W   R3, R3, #3
                BIC.W   R2, R2, R12
                LSL.W   R1, R3, R1
                ORRS    R1, R2
                STR     R1, [R0,#0x20]
                POP     {R4}
                BX      LR
@ End of function ROM_ADCSequenceConfigure


@ =============== S U B R O U T I N E =======================================


ROM_ADCSequenceStepConfigure:           @ DATA XREF: ROM:010000B0↑o
                PUSH    {R4}
                ADD.W   R0, R0, R1,LSL#5
                LDR.W   R12, [R0,#0x40]
                LSLS    R1, R2, #2
                MOVS    R2, #0xF
                LSLS    R2, R1
                AND.W   R4, R3, #0xF
                BIC.W   R12, R12, R2
                LSLS    R4, R1
                ORR.W   R12, R12, R4
                STR.W   R12, [R0,#0x40]
                LDR.W   R12, [R0,#0x44]
                UBFX.W  R3, R3, #4, #4
                BIC.W   R2, R12, R2
                LSL.W   R1, R3, R1
                ORRS    R1, R2
                STR     R1, [R0,#0x44]
                POP     {R4}
                BX      LR
@ End of function ROM_ADCSequenceStepConfigure


@ =============== S U B R O U T I N E =======================================


ROM_ADCSequenceOverflow:                @ DATA XREF: ROM:010000B4↑o
                LDR     R0, [R0,#0x10]
                MOVS    R2, #1
                LSL.W   R1, R2, R1
                ANDS    R0, R1
                BX      LR
@ End of function ROM_ADCSequenceOverflow


@ =============== S U B R O U T I N E =======================================


ROM_ADCSequenceOverflowClear:           @ DATA XREF: ROM:010000B8↑o
                MOVS    R2, #1
                LSL.W   R1, R2, R1
                STR     R1, [R0,#0x10]
                BX      LR
@ End of function ROM_ADCSequenceOverflowClear


@ =============== S U B R O U T I N E =======================================


ROM_ADCSequenceUnderflow:               @ DATA XREF: ROM:010000BC↑o
                LDR     R0, [R0,#0x18]
                MOVS    R2, #1
                LSL.W   R1, R2, R1
                ANDS    R0, R1
                BX      LR
@ End of function ROM_ADCSequenceUnderflow


@ =============== S U B R O U T I N E =======================================


ROM_ADCSequenceUnderflowClear:          @ DATA XREF: ROM:010000C0↑o
                MOVS    R2, #1
                LSL.W   R1, R2, R1
                STR     R1, [R0,#0x18]
                BX      LR
@ End of function ROM_ADCSequenceUnderflowClear


@ =============== S U B R O U T I N E =======================================


ROM_ADCSequenceDataGet:                 @ DATA XREF: ROM:ROM_ADCTABLE↑o
                ADD.W   R0, R0, R1,LSL#5
                ADD.W   R1, R0, #0x40 @ '@'
                MOVS    R0, #0
                B       loc_1000816
@ ---------------------------------------------------------------------------

loc_100080E:                            @ CODE XREF: ROM_ADCSequenceDataGet+20↓j
                LDR     R3, [R1,#8]
                STR.W   R3, [R2],#4
                ADDS    R0, R0, #1

loc_1000816:                            @ CODE XREF: ROM_ADCSequenceDataGet+A↑j
                LDR     R3, [R1,#0xC]
                TST.W   R3, #0x100
                IT ne
                BXne    LR
                CMP     R0, #8
                Bcc     loc_100080E
                BX      LR
@ End of function ROM_ADCSequenceDataGet


@ =============== S U B R O U T I N E =======================================


ROM_ADCProcessorTrigger:                @ DATA XREF: ROM:010000C4↑o
                MOVS    R2, #1
                LSL.W   R1, R2, R1
                STR     R1, [R0,#0x28]
                BX      LR
@ End of function ROM_ADCProcessorTrigger


@ =============== S U B R O U T I N E =======================================


ROM_ADCHardwareOversampleConfigure:     @ DATA XREF: ROM:010000C8↑o
                MOVS    R2, #0
                B       loc_1000836
@ ---------------------------------------------------------------------------

loc_1000834:                            @ CODE XREF: ROM_ADCHardwareOversampleConfigure+8↓j
                ADDS    R2, R2, #1

loc_1000836:                            @ CODE XREF: ROM_ADCHardwareOversampleConfigure+2↑j
                LSRS    R1, R1, #1
                Bne     loc_1000834
                STR     R2, [R0,#0x30]
                BX      LR
@ End of function ROM_ADCHardwareOversampleConfigure


@ =============== S U B R O U T I N E =======================================


ROM_ComparatorConfigure:                @ DATA XREF: ROM:010000F4↑o
                ADD.W   R0, R0, R1,LSL#5
                STR     R2, [R0,#0x24]
                BX      LR
@ End of function ROM_ComparatorConfigure


@ =============== S U B R O U T I N E =======================================


ROM_ComparatorRefSet:                   @ DATA XREF: ROM:010000F8↑o
                STR     R1, [R0,#0x10]
                BX      LR
@ End of function ROM_ComparatorRefSet


@ =============== S U B R O U T I N E =======================================


ROM_ComparatorValueGet:                 @ DATA XREF: ROM:010000FC↑o
                ADD.W   R0, R0, R1,LSL#5
                LDR     R0, [R0,#0x20]
                ANDS.W  R0, R0, #2
                IT ne
                MOVne   R0, #1
                BX      LR
@ End of function ROM_ComparatorValueGet


@ =============== S U B R O U T I N E =======================================


ROM_ComparatorIntEnable:                @ DATA XREF: ROM:01000100↑o
                LDR     R2, [R0,#8]
                MOVS    R3, #1
                LSL.W   R1, R3, R1
                ORRS    R1, R2
                STR     R1, [R0,#8]
                BX      LR
@ End of function ROM_ComparatorIntEnable


@ =============== S U B R O U T I N E =======================================


ROM_ComparatorIntDisable:               @ DATA XREF: ROM:01000104↑o
                LDR     R2, [R0,#8]
                MOVS    R3, #1
                LSL.W   R1, R3, R1
                BIC.W   R1, R2, R1
                STR     R1, [R0,#8]
                BX      LR
@ End of function ROM_ComparatorIntDisable


@ =============== S U B R O U T I N E =======================================


ROM_ComparatorIntStatus:                @ DATA XREF: ROM:01000108↑o
                CMP     R2, #0
                ITTTT ne
                LDRne   R0, [R0]
                LSRne   R0, R1
                ANDne.W R0, R0, #1
                BXne    LR
                LDR     R0, [R0,#4]
                LSRS    R0, R1
                AND.W   R0, R0, #1
                BX      LR
@ End of function ROM_ComparatorIntStatus


@ =============== S U B R O U T I N E =======================================


ROM_ComparatorIntClear:                 @ DATA XREF: ROM:ROM_COMPARATORTABLE↑o
                MOVS    R2, #1
                LSL.W   R1, R2, R1
                STR     R1, [R0]
                BX      LR
@ End of function ROM_ComparatorIntClear


@ =============== S U B R O U T I N E =======================================


ROM_FlashUsecGet:                       @ DATA XREF: ROM:01000134↑o
                LDR     R0, =0x400FE140
                LDR     R0, [R0]
                ADDS    R0, R0, #1
                BX      LR
@ End of function ROM_FlashUsecGet


@ =============== S U B R O U T I N E =======================================


@ void __cdecl ROM_FlashUsecSet(unsigned int ulClocks)
ROM_FlashUsecSet:                       @ CODE XREF: BootLoader_detect_hardware+54↓j
                                        @ DATA XREF: ROM:01000138↑o
                LDR     R1, =0x400FE140
                SUBS    R0, R0, #1
                STR     R0, [R1]
                BX      LR
@ End of function ROM_FlashUsecSet


@ =============== S U B R O U T I N E =======================================


ROM_FlashErase:                         @ DATA XREF: ROM:0100013C↑o
                LDR     R1, =0x400FD000
                MOVS    R2, #1
                STR     R2, [R1,#0x14]
                STR     R0, [R1]
                LDR     R0, =0xA4420002
                STR     R0, [R1,#8]

loc_10008B6:                            @ CODE XREF: ROM_FlashErase+12↓j
                LDR     R0, [R1,#8]
                TST.W   R0, #2
                Bne     loc_10008B6
                LDR     R0, [R1,#0xC]
                ANDS.W  R0, R0, #1
                IT ne
                MOVne.W R0, #0xFFFFFFFF
                BX      LR
@ End of function ROM_FlashErase


@ =============== S U B R O U T I N E =======================================


ROM_FlashProgram:                       @ CODE XREF: BootLoader_receive_packets+11E↓p
                                        @ DATA XREF: ROM:ROM_FLASHTABLE↑o
                PUSH    {R4}
                MOV.W   R12, #1
                LDR     R3, =0x400FD000
                STR.W   R12, [R3,#0x14]
                CBZ     R2, loc_10008FA
                LDR     R4, =0xA4420001

loc_10008DC:                            @ CODE XREF: ROM_FlashProgram+2C↓j
                STR     R1, [R3]
                LDR.W   R12, [R0]
                STR.W   R12, [R3,#4]
                STR     R4, [R3,#8]

loc_10008E8:                            @ CODE XREF: ROM_FlashProgram+24↓j
                LDR.W   R12, [R3,#8]
                TST.W   R12, #1
                Bne     loc_10008E8
                ADDS    R0, R0, #4
                ADDS    R1, R1, #4
                SUBS    R2, R2, #4
                Bne     loc_10008DC

loc_10008FA:                            @ CODE XREF: ROM_FlashProgram+C↑j
                LDR     R0, [R3,#0xC]
                ANDS.W  R0, R0, #1
                IT ne
                MOVne.W R0, #0xFFFFFFFF
                POP     {R4}
                BX      LR
@ End of function ROM_FlashProgram


@ =============== S U B R O U T I N E =======================================


ROM_FlashProtectGet:                    @ DATA XREF: ROM:01000140↑o
                LDR     R2, =FLASH_REG_1002060
                UBFX.W  R1, R0, #0x10, #2
                LDR.W   R2, [R2,R1,LSL#2]
                LDR     R2, [R2]
                LDR     R3, =FLASH_REG_1002050
                LDR.W   R1, [R3,R1,LSL#2]
                LDR     R1, [R1]
                UBFX.W  R0, R0, #0xB, #5
                LSRS    R2, R0
                AND.W   R2, R2, #1
                LSR.W   R0, R1, R0
                BFI.W   R0, R2, #1, #0x1F
                CMP     R0, #0
                ITEE ne
                CMPne   R0, #1
                MOVeq   R0, #2
                BXeq    LR
                CMP     R0, #2
                ITE eq
                MOVeq   R0, #1
                MOVne   R0, #0
                BX      LR
@ End of function ROM_FlashProtectGet


@ =============== S U B R O U T I N E =======================================


ROM_FlashProtectSet:                    @ DATA XREF: ROM:01000144↑o
                LSRS    R0, R0, #0xB
                PUSH    {R4-R6}
                UBFX.W  R3, R0, #5, #2
                AND.W   R2, R0, #0x1F
                LDR     R0, =FLASH_REG_1002060
                LDR.W   R4, [R0,R3,LSL#2]
                LDR     R0, [R4]
                LDR     R6, =FLASH_REG_1002050
                LDR.W   R12, [R6,R3,LSL#2]
                LDR.W   R12, [R12]
                MOVS    R5, #1
                CMP     R1, #1
                Beq     loc_1000974
                CMP     R1, #2
                Bne     loc_1000994
                LSL.W   R1, R5, R2
                BICS    R0, R1
                B       loc_1000982
@ ---------------------------------------------------------------------------

loc_1000974:                            @ CODE XREF: ROM_FlashProtectSet+22↑j
                LSR.W   R1, R0, R2
                TST.W   R1, #1
                Beq     loc_10009AC
                LSL.W   R1, R5, R2

loc_1000982:                            @ CODE XREF: ROM_FlashProtectSet+2E↑j
                BIC.W   R1, R12, R1
                STR     R0, [R4]
                LDR.W   R0, [R6,R3,LSL#2]
                STR     R1, [R0]
                POP     {R4-R6}
                MOVS    R0, #0
                BX      LR
@ ---------------------------------------------------------------------------

loc_1000994:                            @ CODE XREF: ROM_FlashProtectSet+26↑j
                LSRS    R0, R2
                TST.W   R0, #1
                ITTTT ne
                LSRne.W R0, R12, R2
                TSTne.W R0, #1
                MOVne   R0, #0
                POPne   {R4-R6}
                IT ne
                BXne    LR

loc_10009AC:                            @ CODE XREF: ROM_FlashProtectSet+38↑j
                MOV.W   R0, #0xFFFFFFFF
                POP     {R4-R6}
                BX      LR
@ End of function ROM_FlashProtectSet


@ =============== S U B R O U T I N E =======================================


ROM_FlashProtectSave:                   @ DATA XREF: ROM:01000148↑o
                LDR     R3, =0xA4420008
                LDR     R0, =0x400FD000
                MOV.W   R12, #8
                MOVS    R2, #0

loc_10009BE:                            @ CODE XREF: ROM_FlashProtectSave+1A↓j
                STR     R2, [R0]
                STR     R3, [R0,#8]

loc_10009C2:                            @ CODE XREF: ROM_FlashProtectSave+14↓j
                LDR     R1, [R0,#8]
                TST.W   R1, #8
                Bne     loc_10009C2
                ADDS    R2, R2, #1
                CMP     R2, R12
                Blt     loc_10009BE
                MOVS    R0, #0
                BX      LR
@ End of function ROM_FlashProtectSave


@ =============== S U B R O U T I N E =======================================


ROM_FlashUserGet:                       @ DATA XREF: ROM:0100014C↑o
                LDR     R2, =0x400FE1E0
                LDR     R3, [R2]
                STR     R3, [R0]
                LDR     R0, [R2,#4]
                STR     R0, [R1]
                MOVS    R0, #0
                BX      LR
@ End of function ROM_FlashUserGet


@ =============== S U B R O U T I N E =======================================


ROM_FlashUserSet:                       @ DATA XREF: ROM:01000150↑o
                LDR     R2, =0x400FE1E0
                STR     R0, [R2]
                STR     R1, [R2,#4]
                MOVS    R0, #0
                BX      LR
@ End of function ROM_FlashUserSet


@ =============== S U B R O U T I N E =======================================


ROM_FlashUserSave:                      @ DATA XREF: ROM:01000154↑o
                LDR     R0, =0x400FD000
                MOV.W   R1, #0x80000000
                STR     R1, [R0]
                LDR     R2, =0xA4420008
                STR     R2, [R0,#8]

loc_10009F8:                            @ CODE XREF: ROM_FlashUserSave+12↓j
                LDR     R1, [R0,#8]
                TST.W   R1, #8
                Bne     loc_10009F8
                LDR     R1, =0x80000001
                STR     R1, [R0]
                STR     R2, [R0,#8]

loc_1000A06:                            @ CODE XREF: ROM_FlashUserSave+20↓j
                LDR     R1, [R0,#8]
                TST.W   R1, #8
                Bne     loc_1000A06
                MOVS    R0, #0
                BX      LR
@ End of function ROM_FlashUserSave


@ =============== S U B R O U T I N E =======================================


ROM_FlashIntEnable:                     @ DATA XREF: ROM:01000158↑o
                LDR     R1, =0x400FD000
                LDR     R2, [R1,#0x10]
                ORRS    R0, R2
                STR     R0, [R1,#0x10]
                BX      LR
@ End of function ROM_FlashIntEnable


@ =============== S U B R O U T I N E =======================================


ROM_FlashIntDisable:                    @ DATA XREF: ROM:0100015C↑o
                LDR     R1, =0x400FD000
                LDR     R2, [R1,#0x10]
                BIC.W   R0, R2, R0
                STR     R0, [R1,#0x10]
                BX      LR
@ End of function ROM_FlashIntDisable


@ =============== S U B R O U T I N E =======================================


ROM_FlashIntStatus:                     @ DATA XREF: ROM:01000160↑o
                LDR     R1, =0x400FD000
                CMP     R0, #0
                ITE eq
                LDReq   R0, [R1,#0xC]
                LDRne   R0, [R1,#0x14]
                BX      LR
@ End of function ROM_FlashIntStatus


@ =============== S U B R O U T I N E =======================================


ROM_FlashIntClear:                      @ DATA XREF: ROM:01000164↑o
                LDR     R1, =0x400FD000
                STR     R0, [R1,#0x14]
                BX      LR
@ End of function ROM_FlashIntClear


@ =============== S U B R O U T I N E =======================================


@ void __cdecl ROM_GPIODirModeSet(unsigned int ulPort, unsigned __int8 ucPins, unsigned int ulPinIO)
ROM_GPIODirModeSet:                     @ CODE XREF: ROM_GPIOPinTypeCAN+8↓p
                                        @ ROM_GPIOPinTypeComparator+8↓p ...
                LDR.W   R3, [R0,#0x400]
                TST.W   R2, #1
                ITE eq
                BICeq   R3, R1
                ORRne   R3, R1
                STR.W   R3, [R0,#0x400]
                TST.W   R2, #2
                LDR.W   R2, [R0,#0x420]
                ITE eq
                BICeq.W R1, R2, R1
                ORRne   R1, R2
                STR.W   R1, [R0,#0x420]
                BX      LR
@ End of function ROM_GPIODirModeSet


@ =============== S U B R O U T I N E =======================================


ROM_GPIODirModeGet:                     @ DATA XREF: ROM:01000198↑o
                MOVS    R2, #1
                LSL.W   R1, R2, R1
                LDR.W   R2, [R0,#0x400]
                UXTB    R1, R1
                LDR.W   R3, [R0,#0x420]
                ANDS.W  R0, R2, R1
                IT ne
                MOVne   R0, #1
                ANDS    R1, R3
                IT ne
                MOVne   R1, #2
                ORRS    R0, R1
                BX      LR
@ End of function ROM_GPIODirModeGet


@ =============== S U B R O U T I N E =======================================


ROM_GPIOIntTypeSet:                     @ DATA XREF: ROM:0100019C↑o
                LDR.W   R3, [R0,#0x408]
                TST.W   R2, #1
                ITE eq
                BICeq   R3, R1
                ORRne   R3, R1
                STR.W   R3, [R0,#0x408]
                LDR.W   R3, [R0,#0x404]
                TST.W   R2, #2
                ITE eq
                BICeq   R3, R1
                ORRne   R3, R1
                STR.W   R3, [R0,#0x404]
                TST.W   R2, #4
                LDR.W   R2, [R0,#0x40C]
                ITE eq
                BICeq.W R1, R2, R1
                ORRne   R1, R2
                STR.W   R1, [R0,#0x40C]
                BX      LR
@ End of function ROM_GPIOIntTypeSet


@ =============== S U B R O U T I N E =======================================


ROM_GPIOIntTypeGet:                     @ DATA XREF: ROM:010001A0↑o
                MOVS    R2, #1
                LSL.W   R1, R2, R1
                LDR.W   R3, [R0,#0x408]
                UXTB    R1, R1
                LDR.W   R2, [R0,#0x404]
                LDR.W   R12, [R0,#0x40C]
                ANDS.W  R0, R3, R1
                IT ne
                MOVne   R0, #1
                ANDS    R2, R1
                IT ne
                MOVne   R2, #2
                ORRS    R2, R0
                ANDS.W  R0, R12, R1
                IT ne
                MOVne   R0, #4
                ORRS    R0, R2
                BX      LR
@ End of function ROM_GPIOIntTypeGet


@ =============== S U B R O U T I N E =======================================


@ void __cdecl ROM_GPIOPadConfigSet(unsigned int ulPort, unsigned __int8 ucPins, unsigned int ulStrength, unsigned int ulPadType)
ROM_GPIOPadConfigSet:                   @ CODE XREF: ROM_GPIOPinTypeCAN+18↓j
                                        @ ROM_GPIOPinTypeComparator+18↓j ...
                LDR.W   R12, [R0,#0x500]
                TST.W   R2, #1
                ITE eq
                BICeq.W R12, R12, R1
                ORRne.W R12, R12, R1
                STR.W   R12, [R0,#0x500]
                LDR.W   R12, [R0,#0x504]
                TST.W   R2, #2
                ITE eq
                BICeq.W R12, R12, R1
                ORRne.W R12, R12, R1
                STR.W   R12, [R0,#0x504]
                LDR.W   R12, [R0,#0x508]
                TST.W   R2, #4
                ITE eq
                BICeq.W R12, R12, R1
                ORRne.W R12, R12, R1
                STR.W   R12, [R0,#0x508]
                TST.W   R2, #8
                LDR.W   R2, [R0,#0x518]
                ITE eq
                BICeq   R2, R1
                ORRne   R2, R1
                STR.W   R2, [R0,#0x518]
                LDR.W   R2, [R0,#0x50C]
                TST.W   R3, #1
                ITE eq
                BICeq   R2, R1
                ORRne   R2, R1
                STR.W   R2, [R0,#0x50C]
                LDR.W   R2, [R0,#0x510]
                TST.W   R3, #2
                ITE eq
                BICeq   R2, R1
                ORRne   R2, R1
                STR.W   R2, [R0,#0x510]
                LDR.W   R2, [R0,#0x514]
                TST.W   R3, #4
                ITE eq
                BICeq   R2, R1
                ORRne   R2, R1
                STR.W   R2, [R0,#0x514]
                LDR.W   R2, [R0,#0x51C]
                TST.W   R3, #8
                ITE eq
                BICeq.W R1, R2, R1
                ORRne   R1, R2
                STR.W   R1, [R0,#0x51C]
                BX      LR
@ End of function ROM_GPIOPadConfigSet


@ =============== S U B R O U T I N E =======================================


ROM_GPIOPadConfigGet:                   @ DATA XREF: ROM:010001A8↑o
                PUSH    {R4-R6}
                MOV.W   R12, #1
                LSL.W   R1, R12, R1
                LDR.W   R12, [R0,#0x500]
                UXTB    R1, R1
                LDR.W   R4, [R0,#0x504]
                LDR.W   R6, [R0,#0x508]
                LDR.W   R5, [R0,#0x518]
                ANDS.W  R12, R12, R1
                IT ne
                MOVne.W R12, #1
                ANDS    R4, R1
                IT ne
                MOVne   R4, #2
                ORR.W   R4, R12, R4
                ANDS.W  R12, R6, R1
                IT ne
                MOVne.W R12, #4
                ORR.W   R4, R4, R12
                ANDS.W  R12, R5, R1
                IT ne
                MOVne.W R12, #8
                ORR.W   R12, R4, R12
                STR.W   R12, [R2]
                LDR.W   R2, [R0,#0x50C]
                LDR.W   R5, [R0,#0x510]
                LDR.W   R12, [R0,#0x514]
                LDR.W   R4, [R0,#0x51C]
                ANDS.W  R0, R2, R1
                IT ne
                MOVne   R0, #1
                ANDS.W  R2, R5, R1
                IT ne
                MOVne   R2, #2
                ORRS    R2, R0
                ANDS.W  R0, R12, R1
                IT ne
                MOVne   R0, #4
                ORRS    R2, R0
                ANDS.W  R0, R4, R1
                IT ne
                MOVne   R0, #8
                ORRS    R0, R2
                STR     R0, [R3]
                POP     {R4-R6}
                BX      LR
@ End of function ROM_GPIOPadConfigGet


@ =============== S U B R O U T I N E =======================================


ROM_GPIOPinIntEnable:                   @ DATA XREF: ROM:010001AC↑o
                LDR.W   R2, [R0,#0x410]
                ORRS    R1, R2
                STR.W   R1, [R0,#0x410]
                BX      LR
@ End of function ROM_GPIOPinIntEnable


@ =============== S U B R O U T I N E =======================================


ROM_GPIOPinIntDisable:                  @ DATA XREF: ROM:010001B0↑o
                LDR.W   R2, [R0,#0x410]
                BIC.W   R1, R2, R1
                STR.W   R1, [R0,#0x410]
                BX      LR
@ End of function ROM_GPIOPinIntDisable


@ =============== S U B R O U T I N E =======================================


ROM_GPIOPinIntStatus:                   @ DATA XREF: ROM:010001B4↑o
                CMP     R1, #0
                ITE eq
                LDReq.W R0, [R0,#0x414]
                LDRne.W R0, [R0,#0x418]
                BX      LR
@ End of function ROM_GPIOPinIntStatus


@ =============== S U B R O U T I N E =======================================


ROM_GPIOPinIntClear:                    @ DATA XREF: ROM:010001B8↑o
                STR.W   R1, [R0,#0x41C]
                BX      LR
@ End of function ROM_GPIOPinIntClear


@ =============== S U B R O U T I N E =======================================


ROM_GPIOPinRead:                        @ DATA XREF: ROM:010001BC↑o
                LDR.W   R0, [R0,R1,LSL#2]
                BX      LR
@ End of function ROM_GPIOPinRead


@ =============== S U B R O U T I N E =======================================


ROM_GPIOPinWrite:                       @ DATA XREF: ROM:ROM_GPIOTABLE↑o
                STR.W   R2, [R0,R1,LSL#2]
                BX      LR
@ End of function ROM_GPIOPinWrite


@ =============== S U B R O U T I N E =======================================


ROM_GPIOPinTypeCAN:                     @ DATA XREF: ROM:010001C0↑o
                PUSH    {R4,LR}
                MOV     R12, R0
                MOV     R4, R1
                MOVS    R2, #2          @ ulPinIO
                BL      ROM_GPIODirModeSet
                MOV     R1, R4          @ ucPins
                MOVS    R3, #8          @ ulPadType
                POP.W   {R4,LR}
                MOVS    R2, #4          @ ulStrength
                MOV     R0, R12         @ ulPort
                B       ROM_GPIOPadConfigSet
@ End of function ROM_GPIOPinTypeCAN


@ =============== S U B R O U T I N E =======================================


ROM_GPIOPinTypeComparator:              @ DATA XREF: ROM:010001C4↑o
                PUSH    {R4,LR}
                MOV     R12, R0
                MOV     R4, R1
                MOVS    R2, #0          @ ulPinIO
                BL      ROM_GPIODirModeSet
                MOV     R1, R4          @ ucPins
                MOVS    R3, #0          @ ulPadType
                POP.W   {R4,LR}
                MOVS    R2, #1          @ ulStrength
                MOV     R0, R12         @ ulPort
                B       ROM_GPIOPadConfigSet
@ End of function ROM_GPIOPinTypeComparator

@ ---------------------------------------------------------------------------
off_1000C88:    .long 0x400FE140        @ DATA XREF: ROM_FlashUsecGet↑r
                                        @ ROM_FlashUsecSet↑r
off_1000C8C:    .long 0x400FD000        @ DATA XREF: ROM_FlashErase↑r
                                        @ ROM_FlashProgram+6↑r ...
dword_1000C90:  .long 0xA4420002        @ DATA XREF: ROM_FlashErase+8↑r
dword_1000C94:  .long 0xA4420001        @ DATA XREF: ROM_FlashProgram+E↑r
off_1000C98:    .long FLASH_REG_1002060 @ DATA XREF: ROM_FlashProtectGet↑r
                                        @ ROM_FlashProtectSet+C↑r
off_1000C9C:    .long FLASH_REG_1002050 @ DATA XREF: ROM_FlashProtectGet+C↑r
                                        @ ROM_FlashProtectSet+14↑r
dword_1000CA0:  .long 0xA4420008        @ DATA XREF: ROM_FlashProtectSave↑r
                                        @ ROM_FlashUserSave+8↑r
off_1000CA4:    .long 0x400FE1E0        @ DATA XREF: ROM_FlashUserGet↑r
                                        @ ROM_FlashUserSet↑r
dword_1000CA8:  .long 0x80000001        @ DATA XREF: ROM_FlashUserSave+14↑r

@ =============== S U B R O U T I N E =======================================


ROM_GPIOPinTypeGPIOInput:               @ DATA XREF: ROM:010001C8↑o
                PUSH    {R4,LR}
                MOV     R12, R0
                MOV     R4, R1
                MOVS    R2, #0          @ ulPinIO
                BL      ROM_GPIODirModeSet
                MOV     R1, R4          @ ucPins
                MOVS    R3, #8          @ ulPadType
                POP.W   {R4,LR}
                MOVS    R2, #1          @ ulStrength
                MOV     R0, R12         @ ulPort
                B       ROM_GPIOPadConfigSet
@ End of function ROM_GPIOPinTypeGPIOInput


@ =============== S U B R O U T I N E =======================================


ROM_GPIOPinTypeGPIOOutput:              @ DATA XREF: ROM:010001CC↑o
                PUSH    {R4,LR}
                MOV     R12, R0
                MOV     R4, R1
                MOVS    R2, #1          @ ulPinIO
                BL      ROM_GPIODirModeSet
                MOV     R1, R4          @ ucPins
                MOVS    R3, #8          @ ulPadType
                POP.W   {R4,LR}
                MOVS    R2, #1          @ ulStrength
                MOV     R0, R12         @ ulPort
                B       ROM_GPIOPadConfigSet
@ End of function ROM_GPIOPinTypeGPIOOutput


@ =============== S U B R O U T I N E =======================================


ROM_GPIOPinTypeGPIOOutputOD:            @ DATA XREF: ROM:010001E8↑o
                PUSH    {R4,LR}
                MOV     R12, R0
                MOV     R4, R1
                MOVS    R2, #1          @ ulPinIO
                BL      ROM_GPIODirModeSet
                MOV     R1, R4          @ ucPins
                MOVS    R3, #9          @ ulPadType
                POP.W   {R4,LR}
                MOVS    R2, #1          @ ulStrength
                MOV     R0, R12         @ ulPort
                B       ROM_GPIOPadConfigSet
@ End of function ROM_GPIOPinTypeGPIOOutputOD


@ =============== S U B R O U T I N E =======================================


ROM_GPIOPinTypeI2C:                     @ DATA XREF: ROM:010001D0↑o
                PUSH    {R4,LR}
                MOV     R12, R0
                MOV     R4, R1
                MOVS    R2, #2          @ ulPinIO
                BL      ROM_GPIODirModeSet
                MOV     R1, R4          @ ucPins
                MOVS    R3, #0xB        @ ulPadType
                POP.W   {R4,LR}
                MOVS    R2, #1          @ ulStrength
                MOV     R0, R12         @ ulPort
                B       ROM_GPIOPadConfigSet
@ End of function ROM_GPIOPinTypeI2C


@ =============== S U B R O U T I N E =======================================


ROM_GPIOPinTypePWM:                     @ DATA XREF: ROM:010001D4↑o
                PUSH    {R4,LR}
                MOV     R12, R0
                MOV     R4, R1
                MOVS    R2, #2          @ ulPinIO
                BL      ROM_GPIODirModeSet
                MOV     R1, R4          @ ucPins
                MOVS    R3, #8          @ ulPadType
                POP.W   {R4,LR}
                MOVS    R2, #1          @ ulStrength
                MOV     R0, R12         @ ulPort
                B       ROM_GPIOPadConfigSet
@ End of function ROM_GPIOPinTypePWM


@ =============== S U B R O U T I N E =======================================


ROM_GPIOPinTypeQEI:                     @ DATA XREF: ROM:010001D8↑o
                PUSH    {R4,LR}
                MOV     R12, R0
                MOV     R4, R1
                MOVS    R2, #2          @ ulPinIO
                BL      ROM_GPIODirModeSet
                MOV     R1, R4          @ ucPins
                MOVS    R3, #0xA        @ ulPadType
                POP.W   {R4,LR}
                MOVS    R2, #1          @ ulStrength
                MOV     R0, R12         @ ulPort
                B       ROM_GPIOPadConfigSet
@ End of function ROM_GPIOPinTypeQEI


@ =============== S U B R O U T I N E =======================================


ROM_GPIOPinTypeSSI:                     @ DATA XREF: ROM:010001DC↑o
                PUSH    {R4,LR}
                MOV     R12, R0
                MOV     R4, R1
                MOVS    R2, #2          @ ulPinIO
                BL      ROM_GPIODirModeSet
                MOV     R1, R4          @ ucPins
                MOVS    R3, #8          @ ulPadType
                POP.W   {R4,LR}
                MOVS    R2, #1          @ ulStrength
                MOV     R0, R12         @ ulPort
                B       ROM_GPIOPadConfigSet
@ End of function ROM_GPIOPinTypeSSI


@ =============== S U B R O U T I N E =======================================


ROM_GPIOPinTypeTimer:                   @ DATA XREF: ROM:010001E0↑o
                PUSH    {R4,LR}
                MOV     R12, R0
                MOV     R4, R1
                MOVS    R2, #2          @ ulPinIO
                BL      ROM_GPIODirModeSet
                MOV     R1, R4          @ ucPins
                MOVS    R3, #8          @ ulPadType
                POP.W   {R4,LR}
                MOVS    R2, #1          @ ulStrength
                MOV     R0, R12         @ ulPort
                B       ROM_GPIOPadConfigSet
@ End of function ROM_GPIOPinTypeTimer


@ =============== S U B R O U T I N E =======================================


ROM_GPIOPinTypeUART:                    @ DATA XREF: ROM:010001E4↑o
                PUSH    {R4,LR}
                MOV     R12, R0
                MOV     R4, R1
                MOVS    R2, #2          @ ulPinIO
                BL      ROM_GPIODirModeSet
                MOV     R1, R4          @ ucPins
                MOVS    R3, #8          @ ulPadType
                POP.W   {R4,LR}
                MOVS    R2, #1          @ ulStrength
                MOV     R0, R12         @ ulPort
                B       ROM_GPIOPadConfigSet
@ End of function ROM_GPIOPinTypeUART


@ =============== S U B R O U T I N E =======================================


ROM_I2CMasterEnable:                    @ CODE XREF: ROM_I2CMasterInitExpClk+6↓p
                                        @ DATA XREF: ROM:0100021C↑o
                LDR     R1, [R0,#0x20]
                ORR.W   R1, R1, #0x10
                STR     R1, [R0,#0x20]
                BX      LR
@ End of function ROM_I2CMasterEnable


@ =============== S U B R O U T I N E =======================================


ROM_I2CMasterInitExpClk:                @ DATA XREF: ROM:01000214↑o
                PUSH    {LR}
                MOV     R3, R0
                MOV     R12, R1
                BL      ROM_I2CMasterEnable
                CMP     R2, #1
                ITE ne
                LDRne   R0, =100000
                LDReq   R0, =400000
                ADD.W   R1, R0, R0,LSL#2
                ADD.W   R1, R12, R1,LSL#2
                MOVS    R2, #0x14
                SUBS    R1, R1, #1
                MULS    R0, R2
                UDIV.W  R0, R1, R0
                SUBS    R0, R0, #1
                STR     R0, [R3,#0xC]
                POP     {PC}
@ End of function ROM_I2CMasterInitExpClk


@ =============== S U B R O U T I N E =======================================


ROM_I2CSlaveEnable:                     @ CODE XREF: ROM_I2CSlaveInit+6↓p
                                        @ DATA XREF: ROM:01000220↑o
                SUB.W   R1, R0, #0x1000
                LDR.W   R2, [R1,#0x820]
                ORR.W   R2, R2, #0x20
                STR.W   R2, [R1,#0x820]
                MOVS    R1, #1
                STR     R1, [R0,#4]
                BX      LR
@ End of function ROM_I2CSlaveEnable


@ =============== S U B R O U T I N E =======================================


ROM_I2CSlaveInit:                       @ DATA XREF: ROM:01000218↑o
                PUSH    {LR}
                MOV     R3, R0
                MOV     R12, R1
                BL      ROM_I2CSlaveEnable
                STR.W   R12, [R3]
                POP     {PC}
@ End of function ROM_I2CSlaveInit


@ =============== S U B R O U T I N E =======================================


ROM_I2CMasterDisable:                   @ DATA XREF: ROM:01000224↑o
                LDR     R1, [R0,#0x20]
                BIC.W   R1, R1, #0x10
                STR     R1, [R0,#0x20]
                BX      LR
@ End of function ROM_I2CMasterDisable


@ =============== S U B R O U T I N E =======================================


ROM_I2CSlaveDisable:                    @ DATA XREF: ROM:01000228↑o
                MOVS    R1, #0
                STR     R1, [R0,#4]
                SUB.W   R0, R0, #0x1000
                LDR.W   R1, [R0,#0x820]
                BIC.W   R1, R1, #0x20
                STR.W   R1, [R0,#0x820]
                BX      LR
@ End of function ROM_I2CSlaveDisable


@ =============== S U B R O U T I N E =======================================


ROM_I2CMasterIntEnable:                 @ DATA XREF: ROM:0100022C↑o
                MOVS    R1, #1
                STR     R1, [R0,#0x10]
                BX      LR
@ End of function ROM_I2CMasterIntEnable


@ =============== S U B R O U T I N E =======================================


ROM_I2CSlaveIntEnable:                  @ DATA XREF: ROM:01000230↑o
                MOVS    R1, #1
                STR     R1, [R0,#0xC]
                BX      LR
@ End of function ROM_I2CSlaveIntEnable


@ =============== S U B R O U T I N E =======================================


ROM_I2CMasterIntDisable:                @ DATA XREF: ROM:01000234↑o
                MOVS    R1, #0
                STR     R1, [R0,#0x10]
                BX      LR
@ End of function ROM_I2CMasterIntDisable


@ =============== S U B R O U T I N E =======================================


ROM_I2CSlaveIntDisable:                 @ DATA XREF: ROM:01000238↑o
                MOVS    R1, #0
                STR     R1, [R0,#0xC]
                BX      LR
@ End of function ROM_I2CSlaveIntDisable


@ =============== S U B R O U T I N E =======================================


ROM_I2CMasterIntStatus:                 @ DATA XREF: ROM:0100023C↑o
                CBZ     R1, loc_1000E34
                LDR     R0, [R0,#0x18]
                CMP     R0, #0
                IT eq
                BXeq    LR
                B       loc_1000E3C
@ ---------------------------------------------------------------------------

loc_1000E34:                            @ CODE XREF: ROM_I2CMasterIntStatus↑j
                LDR     R0, [R0,#0x14]
                CMP     R0, #0
                IT eq
                BXeq    LR

loc_1000E3C:                            @ CODE XREF: ROM_I2CMasterIntStatus+A↑j
                MOVS    R0, #1
                BX      LR
@ End of function ROM_I2CMasterIntStatus


@ =============== S U B R O U T I N E =======================================


ROM_I2CSlaveIntStatus:                  @ DATA XREF: ROM:01000240↑o
                CBZ     R1, loc_1000E4C
                LDR     R0, [R0,#0x14]
                CMP     R0, #0
                IT eq
                BXeq    LR
                B       loc_1000E54
@ ---------------------------------------------------------------------------

loc_1000E4C:                            @ CODE XREF: ROM_I2CSlaveIntStatus↑j
                LDR     R0, [R0,#0x10]
                CMP     R0, #0
                IT eq
                BXeq    LR

loc_1000E54:                            @ CODE XREF: ROM_I2CSlaveIntStatus+A↑j
                MOVS    R0, #1
                BX      LR
@ End of function ROM_I2CSlaveIntStatus


@ =============== S U B R O U T I N E =======================================


ROM_I2CMasterIntClear:                  @ DATA XREF: ROM:01000244↑o
                MOVS    R1, #1
                STR     R1, [R0,#0x1C]
                STR     R1, [R0,#0x18]
                BX      LR
@ End of function ROM_I2CMasterIntClear


@ =============== S U B R O U T I N E =======================================


ROM_I2CSlaveIntClear:                   @ DATA XREF: ROM:01000248↑o
                MOVS    R1, #1
                STR     R1, [R0,#0x18]
                BX      LR
@ End of function ROM_I2CSlaveIntClear


@ =============== S U B R O U T I N E =======================================


ROM_I2CMasterSlaveAddrSet:              @ DATA XREF: ROM:0100024C↑o
                ORR.W   R1, R2, R1,LSL#1
                STR     R1, [R0]
                BX      LR
@ End of function ROM_I2CMasterSlaveAddrSet


@ =============== S U B R O U T I N E =======================================


ROM_I2CMasterBusy:                      @ DATA XREF: ROM:01000250↑o
                LDR     R0, [R0,#4]
                ANDS.W  R0, R0, #1
                IT ne
                MOVne   R0, #1
                BX      LR
@ End of function ROM_I2CMasterBusy


@ =============== S U B R O U T I N E =======================================


ROM_I2CMasterBusBusy:                   @ DATA XREF: ROM:01000254↑o
                LDR     R0, [R0,#4]
                ANDS.W  R0, R0, #0x40
                IT ne
                MOVne   R0, #1
                BX      LR
@ End of function ROM_I2CMasterBusBusy


@ =============== S U B R O U T I N E =======================================


ROM_I2CMasterControl:                   @ DATA XREF: ROM:01000258↑o
                STR     R1, [R0,#4]
                BX      LR
@ End of function ROM_I2CMasterControl


@ =============== S U B R O U T I N E =======================================


ROM_I2CMasterErr:                       @ DATA XREF: ROM:0100025C↑o
                LDR     R0, [R0,#4]
                TST.W   R0, #1
                Bne     loc_1000E9E
                TST.W   R0, #2
                ITT ne
                ANDne.W R0, R0, #0x1C
                BXne    LR

loc_1000E9E:                            @ CODE XREF: ROM_I2CMasterErr+6↑j
                MOVS    R0, #0
                BX      LR
@ End of function ROM_I2CMasterErr


@ =============== S U B R O U T I N E =======================================


ROM_I2CMasterDataPut:                   @ DATA XREF: ROM:ROM_I2CTABLE↑o
                STR     R1, [R0,#8]
                BX      LR
@ End of function ROM_I2CMasterDataPut


@ =============== S U B R O U T I N E =======================================


ROM_I2CMasterDataGet:                   @ DATA XREF: ROM:01000260↑o
                LDR     R0, [R0,#8]
                BX      LR
@ End of function ROM_I2CMasterDataGet


@ =============== S U B R O U T I N E =======================================


ROM_I2CSlaveStatus:                     @ DATA XREF: ROM:01000264↑o
                LDR     R0, [R0,#4]
                BX      LR
@ End of function ROM_I2CSlaveStatus


@ =============== S U B R O U T I N E =======================================


ROM_I2CSlaveDataPut:                    @ DATA XREF: ROM:01000268↑o
                STR     R1, [R0,#8]
                BX      LR
@ End of function ROM_I2CSlaveDataPut


@ =============== S U B R O U T I N E =======================================


ROM_I2CSlaveDataGet:                    @ DATA XREF: ROM:0100026C↑o
                LDR     R0, [R0,#8]
                BX      LR
@ End of function ROM_I2CSlaveDataGet


@ =============== S U B R O U T I N E =======================================

@ Attributes: thunk

@ void ROM_IntMasterEnable(void)
ROM_IntMasterEnable:                    @ DATA XREF: ROM:01000294↑o
                B.W     BootLoader_enable_irqs
@ End of function ROM_IntMasterEnable


@ =============== S U B R O U T I N E =======================================

@ Attributes: thunk

@ void ROM_IntMasterDisable(void)
ROM_IntMasterDisable:                   @ DATA XREF: ROM:01000298↑o
                B.W     BootLoader_disable_irqs
@ End of function ROM_IntMasterDisable


@ =============== S U B R O U T I N E =======================================


ROM_IntEnable:                          @ CODE XREF: BootLoader_hardware_test+2C↓p
                                        @ DATA XREF: ROM:ROM_INTERRUPTTABLE↑o
                MOV.W   R2, #0xE000E000
                CMP     R0, #4
                ITT eq
                LDReq.W R0, [R2,#0xD24]
                ORReq.W R0, R0, #0x10000
                Beq     loc_1000EDC
                CMP     R0, #5
                Bne     loc_1000EE2
                LDR.W   R0, [R2,#0xD24]
                ORR.W   R0, R0, #0x20000

loc_1000EDC:                            @ CODE XREF: ROM_IntEnable+10↑j
                STR.W   R0, [R2,#0xD24]
                BX      LR
@ ---------------------------------------------------------------------------

loc_1000EE2:                            @ CODE XREF: ROM_IntEnable+14↑j
                CMP     R0, #6
                ITTTT eq
                LDReq.W R0, [R2,#0xD24]
                ORReq.W R0, R0, #0x40000
                STReq.W R0, [R2,#0xD24]
                BXeq    LR
                CMP     R0, #0xF
                ITTTT eq
                LDReq   R0, [R2,#0x10]
                ORReq.W R0, R0, #2
                STReq   R0, [R2,#0x10]
                BXeq    LR
                SUB.W   R1, R0, #0x10
                MOVS    R3, #1
                CMP     R1, #0x1F
                ITTT ls
                LSLls.W R0, R3, R1
                STRls.W R0, [R2,#0x100]
                BXls    LR
                CMP     R0, #0x30 @ '0'
                ITTT cs
                SUBcs   R0, #0x30 @ '0'
                LSLcs.W R0, R3, R0
                STRcs.W R0, [R2,#0x104]
                BX      LR
@ End of function ROM_IntEnable


@ =============== S U B R O U T I N E =======================================


ROM_IntDisable:                         @ CODE XREF: BootLoader_hardware_test+4A↓p
                                        @ BootLoader_hardware_test+66↓p ...
                MOV.W   R2, #0xE000E000
                CMP     R0, #4
                ITT eq
                LDReq.W R0, [R2,#0xD24]
                BICeq.W R0, R0, #0x10000
                Beq     loc_1000F44
                CMP     R0, #5
                Bne     loc_1000F4A
                LDR.W   R0, [R2,#0xD24]
                BIC.W   R0, R0, #0x20000

loc_1000F44:                            @ CODE XREF: ROM_IntDisable+10↑j
                STR.W   R0, [R2,#0xD24]
                BX      LR
@ ---------------------------------------------------------------------------

loc_1000F4A:                            @ CODE XREF: ROM_IntDisable+14↑j
                CMP     R0, #6
                ITTTT eq
                LDReq.W R0, [R2,#0xD24]
                BICeq.W R0, R0, #0x40000
                STReq.W R0, [R2,#0xD24]
                BXeq    LR
                CMP     R0, #0xF
                ITTTT eq
                LDReq   R0, [R2,#0x10]
                BICeq.W R0, R0, #2
                STReq   R0, [R2,#0x10]
                BXeq    LR
                SUB.W   R1, R0, #0x10
                MOVS    R3, #1
                CMP     R1, #0x1F
                ITTT ls
                LSLls.W R0, R3, R1
                STRls.W R0, [R2,#0x180]
                BXls    LR
                CMP     R0, #0x30 @ '0'
                ITTT cs
                SUBcs   R0, #0x30 @ '0'
                LSLcs.W R0, R3, R0
                STRcs.W R0, [R2,#0x184]
                BX      LR
@ End of function ROM_IntDisable


@ =============== S U B R O U T I N E =======================================


ROM_IntPriorityGet:                     @ DATA XREF: ROM:010002AC↑o
                BIC.W   R1, R0, #3
                LDR     R2, =dword_1002090
                LDR     R1, [R2,R1]
                LDR     R1, [R1]
                LSLS    R0, R0, #0x1E
                LSRS    R0, R0, #0x1B
                LSR.W   R0, R1, R0
                UXTB    R0, R0
                BX      LR
@ End of function ROM_IntPriorityGet


@ =============== S U B R O U T I N E =======================================


ROM_IntPrioritySet:                     @ DATA XREF: ROM:010002A8↑o
                LDR     R2, =dword_1002090
                BIC.W   R3, R0, #3
                LDR     R2, [R2,R3]
                LDR     R3, [R2]
                LSLS    R0, R0, #0x1E
                LSRS    R0, R0, #0x1B
                MOV.W   R12, #0xFF
                LSL.W   R12, R12, R0
                BIC.W   R3, R3, R12
                LSL.W   R0, R1, R0
                ORRS    R0, R3
                STR     R0, [R2]
                BX      LR
@ End of function ROM_IntPrioritySet


@ =============== S U B R O U T I N E =======================================


ROM_IntPriorityGroupingGet:             @ DATA XREF: ROM:010002A4↑o
                LDR     R0, =0xE000ED0C
                LDR     R0, [R0]
                LDR     R1, =PriorityGroups
                AND.W   R2, R0, #0x700
                MOVS    R0, #0

loc_1000FD4:                            @ CODE XREF: ROM_IntPriorityGroupingGet+18↓j
                LDR.W   R3, [R1,R0,LSL#2]
                CMP     R3, R2
                ITT ne
                ADDne   R0, R0, #1
                CMPne   R0, #8
                Bcc     loc_1000FD4
                BX      LR
@ End of function ROM_IntPriorityGroupingGet


@ =============== S U B R O U T I N E =======================================


ROM_IntPriorityGroupingSet:             @ DATA XREF: ROM:010002A0↑o
                LDR     R1, =PriorityGroups
                LDR.W   R0, [R1,R0,LSL#2]
                LDR     R1, =0xE000ED0C
                ORR.W   R0, R0, #0x1FA0000
                ORR.W   R0, R0, #0x4000000
                STR     R0, [R1]
                BX      LR
@ End of function ROM_IntPriorityGroupingSet


@ =============== S U B R O U T I N E =======================================


ROM_PWMGenConfigure:                    @ DATA XREF: ROM:010002D4↑o
                ADD     R0, R1
                LDR     R1, [R0]
                BIC.W   R1, R1, #0x3E
                ORRS    R1, R2
                STR     R1, [R0]
                TST.W   R2, #2
                ITTT ne
                MOVne   R1, #0xB0
                STRne   R1, [R0,#0x20]
                LSLne   R1, R1, #4
                Bne     loc_100101A
                MOVS    R1, #0x8C
                STR     R1, [R0,#0x20]
                MOVW    R1, #0x80C

loc_100101A:                            @ CODE XREF: ROM_PWMGenConfigure+18↑j
                STR     R1, [R0,#0x24]
                BX      LR
@ End of function ROM_PWMGenConfigure


@ =============== S U B R O U T I N E =======================================


ROM_PWMGenPeriodSet:                    @ DATA XREF: ROM:010002D8↑o
                ADD     R0, R1
                LDR     R1, [R0]
                TST.W   R1, #2
                ITE eq
                SUBeq   R1, R2, #1
                LSRne   R1, R2, #1
                STR     R1, [R0,#0x10]
                BX      LR
@ End of function ROM_PWMGenPeriodSet


@ =============== S U B R O U T I N E =======================================


ROM_PWMGenPeriodGet:                    @ DATA XREF: ROM:010002DC↑o
                ADD     R0, R1
                LDR     R1, [R0]
                LDR     R0, [R0,#0x10]
                TST.W   R1, #2
                ITE eq
                ADDeq   R0, R0, #1
                LSLne   R0, R0, #1
                BX      LR
@ End of function ROM_PWMGenPeriodGet


@ =============== S U B R O U T I N E =======================================


ROM_PWMGenEnable:                       @ DATA XREF: ROM:010002E0↑o
                LDR     R2, [R0,R1]
                ORR.W   R2, R2, #1
                STR     R2, [R0,R1]
                BX      LR
@ End of function ROM_PWMGenEnable


@ =============== S U B R O U T I N E =======================================


ROM_PWMGenDisable:                      @ DATA XREF: ROM:010002E4↑o
                LDR     R2, [R0,R1]
                BIC.W   R2, R2, #1
                STR     R2, [R0,R1]
                BX      LR
@ End of function ROM_PWMGenDisable


@ =============== S U B R O U T I N E =======================================


ROM_PWMPulseWidthSet:                   @ DATA XREF: ROM:ROM_PWMTABLE↑o
                BIC.W   R3, R1, #0x3F
                ADD     R0, R3
                LDR     R3, [R0]
                TST.W   R3, #2
                IT ne
                LSRne   R2, R2, #1
                LDR     R3, [R0,#0x10]
                SUBS    R2, R3, R2
                TST.W   R1, #1
                ITE eq
                STReq   R2, [R0,#0x18]
                STRne   R2, [R0,#0x1C]
                BX      LR
@ End of function ROM_PWMPulseWidthSet


@ =============== S U B R O U T I N E =======================================


ROM_PWMPulseWidthGet:                   @ DATA XREF: ROM:010002E8↑o
                BIC.W   R2, R1, #0x3F
                ADD     R2, R0
                LDR     R3, [R2,#0x10]
                TST.W   R1, #1
                ITE eq
                LDReq   R0, [R2,#0x18]
                LDRne   R0, [R2,#0x1C]
                SUBS    R0, R3, R0
                LDR     R1, [R2]
                TST.W   R1, #2
                IT ne
                LSLne   R0, R0, #1
                BX      LR
@ End of function ROM_PWMPulseWidthGet


@ =============== S U B R O U T I N E =======================================


ROM_PWMDeadBandEnable:                  @ DATA XREF: ROM:010002EC↑o
                ADD     R0, R1
                STR     R2, [R0,#0x2C]
                STR     R3, [R0,#0x30]
                LDR     R1, [R0,#0x28]
                ORR.W   R1, R1, #1
                STR     R1, [R0,#0x28]
                BX      LR
@ End of function ROM_PWMDeadBandEnable


@ =============== S U B R O U T I N E =======================================


ROM_PWMDeadBandDisable:                 @ DATA XREF: ROM:010002F0↑o
                ADD     R0, R1
                LDR     R1, [R0,#0x28]
                BIC.W   R1, R1, #1
                STR     R1, [R0,#0x28]
                BX      LR
@ End of function ROM_PWMDeadBandDisable


@ =============== S U B R O U T I N E =======================================


ROM_PWMSyncUpdate:                      @ DATA XREF: ROM:010002F4↑o
                STR     R1, [R0]
                BX      LR
@ End of function ROM_PWMSyncUpdate


@ =============== S U B R O U T I N E =======================================


ROM_PWMSyncTimeBase:                    @ DATA XREF: ROM:010002F8↑o
                STR     R1, [R0,#4]
                BX      LR
@ End of function ROM_PWMSyncTimeBase


@ =============== S U B R O U T I N E =======================================


ROM_PWMOutputState:                     @ DATA XREF: ROM:010002FC↑o
                CMP     R2, #1
                LDR     R2, [R0,#8]
                ITE ne
                BICne.W R1, R2, R1
                ORReq   R1, R2
                STR     R1, [R0,#8]
                BX      LR
@ End of function ROM_PWMOutputState


@ =============== S U B R O U T I N E =======================================


ROM_PWMOutputInvert:                    @ DATA XREF: ROM:01000300↑o
                CMP     R2, #1
                LDR     R2, [R0,#0xC]
                ITE ne
                BICne.W R1, R2, R1
                ORReq   R1, R2
                STR     R1, [R0,#0xC]
                BX      LR
@ End of function ROM_PWMOutputInvert


@ =============== S U B R O U T I N E =======================================


ROM_PWMOutputFault:                     @ DATA XREF: ROM:01000304↑o
                CMP     R2, #1
                LDR     R2, [R0,#0x10]
                ITE ne
                BICne.W R1, R2, R1
                ORReq   R1, R2
                STR     R1, [R0,#0x10]
                BX      LR
@ End of function ROM_PWMOutputFault


@ =============== S U B R O U T I N E =======================================


ROM_PWMGenIntTrigEnable:                @ DATA XREF: ROM:01000308↑o
                ADD     R0, R1
                LDR     R1, [R0,#4]
                ORRS    R1, R2
                STR     R1, [R0,#4]
                BX      LR
@ End of function ROM_PWMGenIntTrigEnable


@ =============== S U B R O U T I N E =======================================


ROM_PWMGenIntTrigDisable:               @ DATA XREF: ROM:0100030C↑o
                ADD     R0, R1
                LDR     R1, [R0,#4]
                BICS    R1, R2
                STR     R1, [R0,#4]
                BX      LR
@ End of function ROM_PWMGenIntTrigDisable


@ =============== S U B R O U T I N E =======================================


ROM_PWMGenIntStatus:                    @ DATA XREF: ROM:01000310↑o
                ADD     R0, R1
                CMP     R2, #1
                ITE ne
                LDRne   R0, [R0,#8]
                LDReq   R0, [R0,#0xC]
                BX      LR
@ End of function ROM_PWMGenIntStatus


@ =============== S U B R O U T I N E =======================================


ROM_PWMGenIntClear:                     @ DATA XREF: ROM:01000314↑o
                ADD     R0, R1
                STR     R2, [R0,#0xC]
                BX      LR
@ End of function ROM_PWMGenIntClear


@ =============== S U B R O U T I N E =======================================


ROM_PWMIntEnable:                       @ DATA XREF: ROM:01000318↑o
                LDR     R2, [R0,#0x14]
                ORRS    R1, R2
                STR     R1, [R0,#0x14]
                BX      LR
@ End of function ROM_PWMIntEnable


@ =============== S U B R O U T I N E =======================================


ROM_PWMIntDisable:                      @ DATA XREF: ROM:0100031C↑o
                LDR     R2, [R0,#0x14]
                BIC.W   R1, R2, R1
                STR     R1, [R0,#0x14]
                BX      LR
@ End of function ROM_PWMIntDisable


@ =============== S U B R O U T I N E =======================================


ROM_PWMFaultIntClear:                   @ DATA XREF: ROM:01000320↑o
                MOV.W   R1, #0x10000
                STR     R1, [R0,#0x1C]
                BX      LR
@ End of function ROM_PWMFaultIntClear


@ =============== S U B R O U T I N E =======================================


ROM_PWMIntStatus:                       @ DATA XREF: ROM:01000324↑o
                CMP     R1, #1
                ITE ne
                LDRne   R0, [R0,#0x18]
                LDReq   R0, [R0,#0x1C]
                BX      LR
@ End of function ROM_PWMIntStatus


@ =============== S U B R O U T I N E =======================================


ROM_QEIEnable:                          @ DATA XREF: ROM:01000354↑o
                LDR     R1, [R0]
                ORR.W   R1, R1, #1
                STR     R1, [R0]
                BX      LR
@ End of function ROM_QEIEnable


@ =============== S U B R O U T I N E =======================================


ROM_QEIDisable:                         @ DATA XREF: ROM:01000358↑o
                LDR     R1, [R0]
                BIC.W   R1, R1, #1
                STR     R1, [R0]
                BX      LR
@ End of function ROM_QEIDisable


@ =============== S U B R O U T I N E =======================================


ROM_QEIConfigure:                       @ DATA XREF: ROM:0100035C↑o
                LDR     R3, [R0]
                BIC.W   R3, R3, #0x1E
                ORRS    R1, R3
                STR     R1, [R0]
                STR     R2, [R0,#0xC]
                BX      LR
@ End of function ROM_QEIConfigure


@ =============== S U B R O U T I N E =======================================


ROM_QEIPositionGet:                     @ DATA XREF: ROM:ROM_QEITABLE↑o
                LDR     R0, [R0,#8]
                BX      LR
@ End of function ROM_QEIPositionGet


@ =============== S U B R O U T I N E =======================================


ROM_QEIPositionSet:                     @ DATA XREF: ROM:01000360↑o
                STR     R1, [R0,#8]
                BX      LR
@ End of function ROM_QEIPositionSet


@ =============== S U B R O U T I N E =======================================


ROM_QEIDirectionGet:                    @ DATA XREF: ROM:01000364↑o
                LDR     R0, [R0,#4]
                TST.W   R0, #2
                ITE eq
                MOVeq   R0, #1
                MOVne.W R0, #0xFFFFFFFF
                BX      LR
@ End of function ROM_QEIDirectionGet


@ =============== S U B R O U T I N E =======================================


ROM_QEIErrorGet:                        @ DATA XREF: ROM:01000368↑o
                LDR     R0, [R0,#4]
                AND.W   R0, R0, #1
                BX      LR
@ End of function ROM_QEIErrorGet


@ =============== S U B R O U T I N E =======================================


ROM_QEIVelocityEnable:                  @ DATA XREF: ROM:0100036C↑o
                LDR     R1, [R0]
                ORR.W   R1, R1, #0x20
                STR     R1, [R0]
                BX      LR
@ End of function ROM_QEIVelocityEnable


@ =============== S U B R O U T I N E =======================================


ROM_QEIVelocityDisable:                 @ DATA XREF: ROM:01000370↑o
                LDR     R1, [R0]
                BIC.W   R1, R1, #0x20
                STR     R1, [R0]
                BX      LR
@ End of function ROM_QEIVelocityDisable


@ =============== S U B R O U T I N E =======================================


ROM_QEIVelocityConfigure:               @ DATA XREF: ROM:01000374↑o
                LDR     R3, [R0]
                BIC.W   R3, R3, #0x1C0
                ORRS    R1, R3
                STR     R1, [R0]
                SUBS    R1, R2, #1
                STR     R1, [R0,#0x10]
                BX      LR
@ End of function ROM_QEIVelocityConfigure

@ ---------------------------------------------------------------------------
                .byte    0
                .byte    0
dword_100119C:  .long 100000            @ DATA XREF: ROM_I2CMasterInitExpClk+E↑r
dword_10011A0:  .long 400000            @ DATA XREF: ROM_I2CMasterInitExpClk+10↑r
off_10011A4:    .long dword_1002090     @ DATA XREF: ROM_IntPriorityGet+4↑r
                                        @ ROM_IntPrioritySet↑r
dword_10011A8:  .long 0xE000ED0C        @ DATA XREF: ROM_IntPriorityGroupingGet↑r
                                        @ ROM_IntPriorityGroupingSet+6↑r
off_10011AC:    .long PriorityGroups    @ DATA XREF: ROM_IntPriorityGroupingGet+4↑r
                                        @ ROM_IntPriorityGroupingSet↑r

@ =============== S U B R O U T I N E =======================================


ROM_QEIVelocityGet:                     @ DATA XREF: ROM:01000378↑o
                LDR     R0, [R0,#0x1C]
                BX      LR
@ End of function ROM_QEIVelocityGet


@ =============== S U B R O U T I N E =======================================


ROM_QEIIntEnable:                       @ DATA XREF: ROM:0100037C↑o
                LDR     R2, [R0,#0x20]
                ORRS    R1, R2
                STR     R1, [R0,#0x20]
                BX      LR
@ End of function ROM_QEIIntEnable


@ =============== S U B R O U T I N E =======================================


ROM_QEIIntDisable:                      @ DATA XREF: ROM:01000380↑o
                LDR     R2, [R0,#0x20]
                BIC.W   R1, R2, R1
                STR     R1, [R0,#0x20]
                BX      LR
@ End of function ROM_QEIIntDisable


@ =============== S U B R O U T I N E =======================================


ROM_QEIIntStatus:                       @ DATA XREF: ROM:01000384↑o
                CMP     R1, #0
                ITE eq
                LDReq   R0, [R0,#0x24]
                LDRne   R0, [R0,#0x28]
                BX      LR
@ End of function ROM_QEIIntStatus


@ =============== S U B R O U T I N E =======================================


ROM_QEIIntClear:                        @ DATA XREF: ROM:01000388↑o
                STR     R1, [R0,#0x28]
                BX      LR
@ End of function ROM_QEIIntClear


@ =============== S U B R O U T I N E =======================================


ROM_SSIConfigSetExpClk:                 @ DATA XREF: ROM:010003B4↑o

arg_0           =  0
arg_4           =  4

                PUSH    {R4,R5}
                LDR     R5, [SP,#8+arg_0]
                LDR     R4, [SP,#8+arg_4]
                CMP     R3, #2
                ITE ne
                MOVne.W R12, #0
                MOVeq.W R12, #8
                CMP     R3, #0
                IT ne
                MOVne   R3, #4
                ORR.W   R3, R3, R12
                STR     R3, [R0,#4]
                UDIV.W  R12, R1, R5
                MOVS    R1, #0

loc_10011F8:                            @ CODE XREF: ROM_SSIConfigSetExpClk+2E↓j
                ADDS    R1, R1, #2
                UDIV.W  R3, R12, R1
                SUBS    R3, R3, #1
                CMP     R3, #0xFF
                Bhi     loc_10011F8
                STR     R1, [R0,#0x10]
                LSLS    R1, R2, #6
                AND.W   R2, R2, #0x30
                ORR.W   R1, R1, R3,LSL#8
                ORRS    R1, R2
                SUBS    R2, R4, #1
                ORRS    R1, R2
                STR     R1, [R0]
                POP     {R4,R5}
                BX      LR
@ End of function ROM_SSIConfigSetExpClk


@ =============== S U B R O U T I N E =======================================


ROM_SSIEnable:                          @ DATA XREF: ROM:010003B8↑o
                LDR     R1, [R0,#4]
                ORR.W   R1, R1, #2
                STR     R1, [R0,#4]
                BX      LR
@ End of function ROM_SSIEnable


@ =============== S U B R O U T I N E =======================================


ROM_SSIDisable:                         @ DATA XREF: ROM:010003BC↑o
                LDR     R1, [R0,#4]
                BIC.W   R1, R1, #2
                STR     R1, [R0,#4]
                BX      LR
@ End of function ROM_SSIDisable


@ =============== S U B R O U T I N E =======================================


ROM_SSIIntEnable:                       @ DATA XREF: ROM:010003C0↑o
                LDR     R2, [R0,#0x14]
                ORRS    R1, R2
                STR     R1, [R0,#0x14]
                BX      LR
@ End of function ROM_SSIIntEnable


@ =============== S U B R O U T I N E =======================================


ROM_SSIIntDisable:                      @ DATA XREF: ROM:010003C4↑o
                LDR     R2, [R0,#0x14]
                BIC.W   R1, R2, R1
                STR     R1, [R0,#0x14]
                BX      LR
@ End of function ROM_SSIIntDisable


@ =============== S U B R O U T I N E =======================================


ROM_SSIIntStatus:                       @ DATA XREF: ROM:010003C8↑o
                CMP     R1, #0
                ITE eq
                LDReq   R0, [R0,#0x18]
                LDRne   R0, [R0,#0x1C]
                BX      LR
@ End of function ROM_SSIIntStatus


@ =============== S U B R O U T I N E =======================================


ROM_SSIIntClear:                        @ DATA XREF: ROM:010003CC↑o
                STR     R1, [R0,#0x20]
                BX      LR
@ End of function ROM_SSIIntClear


@ =============== S U B R O U T I N E =======================================


ROM_SSIDataPut:                         @ CODE XREF: ROM_SSIDataPut+6↓j
                                        @ BootLoader_ssi_write_bytes+14↓p
                                        @ DATA XREF: ...
                LDR     R2, [R0,#0xC]
                TST.W   R2, #2
                Beq     ROM_SSIDataPut
                STR     R1, [R0,#8]
                BX      LR
@ End of function ROM_SSIDataPut


@ =============== S U B R O U T I N E =======================================


ROM_SSIDataPutNonBlocking:              @ DATA XREF: ROM:010003D0↑o
                LDR     R2, [R0,#0xC]
                TST.W   R2, #2
                ITEE eq
                MOVeq   R0, #0
                STRne   R1, [R0,#8]
                MOVne   R0, #1
                BX      LR
@ End of function ROM_SSIDataPutNonBlocking


@ =============== S U B R O U T I N E =======================================


ROM_SSIDataGet:                         @ CODE XREF: ROM_SSIDataGet+6↓j
                                        @ DATA XREF: ROM:010003D4↑o
                LDR     R2, [R0,#0xC]
                TST.W   R2, #4
                Beq     ROM_SSIDataGet
                LDR     R0, [R0,#8]
                STR     R0, [R1]
                BX      LR
@ End of function ROM_SSIDataGet


@ =============== S U B R O U T I N E =======================================


ROM_SSIDataGetNonBlocking:              @ CODE XREF: BootLoader_ssi_write_bytes+24↓p
                                        @ DATA XREF: ROM:010003D8↑o
                LDR     R2, [R0,#0xC]
                TST.W   R2, #4
                ITEEE eq
                MOVeq   R0, #0
                LDRne   R0, [R0,#8]
                STRne   R0, [R1]
                MOVne   R0, #1
                BX      LR
@ End of function ROM_SSIDataGetNonBlocking


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlSRAMSizeGet:                  @ DATA XREF: ROM:01000404↑o
                LDR     R0, =0x400FE000
                LDR     R0, [R0,#8]
                BIC.W   R0, R0, #0xFF00
                LSRS    R0, R0, #8
                ADD.W   R0, R0, #0x100
                BX      LR
@ End of function ROM_SysCtlSRAMSizeGet


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlFlashSizeGet:                 @ CODE XREF: BootLoader_receive_packets+68↓p
                                        @ BootLoader_receive_packets+C2↓p
                                        @ DATA XREF: ...
                LDR     R0, =0x400FE000
                LDR     R0, [R0,#8]
                LSLS    R0, R0, #0x10
                LSRS    R0, R0, #5
                ADD.W   R0, R0, #0x800
                BX      LR
@ End of function ROM_SysCtlFlashSizeGet


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlPinPresent:                   @ DATA XREF: ROM:0100040C↑o
                LDR     R1, =0x400FE000
                LDR     R1, [R1,#0x18]
                ANDS    R0, R1
                IT ne
                MOVne   R0, #1
                BX      LR
@ End of function ROM_SysCtlPinPresent


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlPeripheralPresent:            @ DATA XREF: ROM:01000410↑o
                LSRS    R1, R0, #0x1C
                LDR     R2, =SYSCTL_DC_REGS
                LDR.W   R1, [R2,R1,LSL#2]
                LDR     R1, [R1]
                UXTH    R2, R0
                UBFX.W  R0, R0, #0x10, #5
                LSL.W   R0, R2, R0
                ANDS    R0, R1
                IT ne
                MOVne   R0, #1
                BX      LR
@ End of function ROM_SysCtlPeripheralPresent


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlPeripheralReset:              @ DATA XREF: ROM:01000414↑o
                PUSH    {R4}
                LSRS    R1, R0, #0x1C
                LDR.W   R12, =SYSCTL_SRCR_REGS
                LDR.W   R2, [R12,R1,LSL#2]
                LDR     R4, [R2]
                UXTH    R3, R0
                UBFX.W  R0, R0, #0x10, #5
                LSLS    R3, R0
                ORR.W   R0, R4, R3
                STR     R0, [R2]
                MOVS    R0, #0

loc_10012F0:                            @ CODE XREF: ROM_SysCtlPeripheralReset+22↓j
                ADDS    R0, R0, #1
                CMP     R0, #0x10
                Bcc     loc_10012F0
                LDR.W   R0, [R12,R1,LSL#2]
                LDR     R1, [R0]
                BICS    R1, R3
                STR     R1, [R0]
                POP     {R4}
                BX      LR
@ End of function ROM_SysCtlPeripheralReset


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlPeripheralEnable:             @ DATA XREF: ROM:01000418↑o
                LDR     R2, =SYSCTL_RCGC_REGS
                LSRS    R1, R0, #0x1C
                LDR.W   R1, [R2,R1,LSL#2]
                LDR     R2, [R1]
                UXTH    R3, R0
                UBFX.W  R0, R0, #0x10, #5
                LSL.W   R0, R3, R0
                ORRS    R0, R2
                STR     R0, [R1]
                BX      LR
@ End of function ROM_SysCtlPeripheralEnable


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlPeripheralDisable:            @ DATA XREF: ROM:0100041C↑o
                LDR     R2, =SYSCTL_RCGC_REGS
                LSRS    R1, R0, #0x1C
                LDR.W   R1, [R2,R1,LSL#2]
                LDR     R2, [R1]
                UXTH    R3, R0
                UBFX.W  R0, R0, #0x10, #5
                LSL.W   R0, R3, R0
                BIC.W   R0, R2, R0
                STR     R0, [R1]
                BX      LR
@ End of function ROM_SysCtlPeripheralDisable


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlPeripheralSleepEnable:        @ DATA XREF: ROM:01000420↑o
                LDR     R2, =SYSCTL_SCGC_REGS
                LSRS    R1, R0, #0x1C
                LDR.W   R1, [R2,R1,LSL#2]
                LDR     R2, [R1]
                UXTH    R3, R0
                UBFX.W  R0, R0, #0x10, #5
                LSL.W   R0, R3, R0
                ORRS    R0, R2
                STR     R0, [R1]
                BX      LR
@ End of function ROM_SysCtlPeripheralSleepEnable


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlPeripheralSleepDisable:       @ DATA XREF: ROM:01000424↑o
                LDR     R2, =SYSCTL_SCGC_REGS
                LSRS    R1, R0, #0x1C
                LDR.W   R1, [R2,R1,LSL#2]
                LDR     R2, [R1]
                UXTH    R3, R0
                UBFX.W  R0, R0, #0x10, #5
                LSL.W   R0, R3, R0
                BIC.W   R0, R2, R0
                STR     R0, [R1]
                BX      LR
@ End of function ROM_SysCtlPeripheralSleepDisable


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlPeripheralDeepSleepEnable:    @ DATA XREF: ROM:01000428↑o
                LDR     R2, =SYSCTL_DCGC_REGS
                LSRS    R1, R0, #0x1C
                LDR.W   R1, [R2,R1,LSL#2]
                LDR     R2, [R1]
                UXTH    R3, R0
                UBFX.W  R0, R0, #0x10, #5
                LSL.W   R0, R3, R0
                ORRS    R0, R2
                STR     R0, [R1]
                BX      LR
@ End of function ROM_SysCtlPeripheralDeepSleepEnable


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlPeripheralDeepSleepDisable:   @ DATA XREF: ROM:0100042C↑o
                LDR     R2, =SYSCTL_DCGC_REGS
                LSRS    R1, R0, #0x1C
                LDR.W   R1, [R2,R1,LSL#2]
                LDR     R2, [R1]
                UXTH    R3, R0
                UBFX.W  R0, R0, #0x10, #5
                LSL.W   R0, R3, R0
                BIC.W   R0, R2, R0
                STR     R0, [R1]
                BX      LR
@ End of function ROM_SysCtlPeripheralDeepSleepDisable


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlPeripheralClockGating:        @ DATA XREF: ROM:01000430↑o
                LDR     R1, =0x400FE000
                CMP     R0, #0
                LDR     R0, [R1,#0x60]
                ITE eq
                BICeq.W R0, R0, #0x8000000
                ORRne.W R0, R0, #0x8000000
                STR     R0, [R1,#0x60]
                BX      LR
@ End of function ROM_SysCtlPeripheralClockGating


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlIntEnable:                    @ DATA XREF: ROM:01000434↑o
                LDR     R1, =0x400FE000
                LDR     R2, [R1,#0x54]
                ORRS    R0, R2
                STR     R0, [R1,#0x54]
                BX      LR
@ End of function ROM_SysCtlIntEnable


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlIntDisable:                   @ DATA XREF: ROM:01000438↑o
                LDR     R1, =0x400FE000
                LDR     R2, [R1,#0x54]
                BIC.W   R0, R2, R0
                STR     R0, [R1,#0x54]
                BX      LR
@ End of function ROM_SysCtlIntDisable


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlIntClear:                     @ DATA XREF: ROM:0100043C↑o
                LDR     R1, =0x400FE000
                STR     R0, [R1,#0x58]
                BX      LR
@ End of function ROM_SysCtlIntClear


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlIntStatus:                    @ DATA XREF: ROM:01000440↑o
                LDR     R1, =0x400FE000
                CMP     R0, #0
                ITE eq
                LDReq   R0, [R1,#0x50]
                LDRne   R0, [R1,#0x58]
                BX      LR
@ End of function ROM_SysCtlIntStatus


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlLDOSet:                       @ DATA XREF: ROM:01000444↑o
                LDR     R1, =0x400FE000
                STR     R0, [R1,#0x34]
                BX      LR
@ End of function ROM_SysCtlLDOSet


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlLDOGet:                       @ DATA XREF: ROM:01000448↑o
                LDR     R0, =0x400FE000
                LDR     R0, [R0,#0x34]
                BX      LR
@ End of function ROM_SysCtlLDOGet


@ =============== S U B R O U T I N E =======================================

@ Attributes: noreturn

ROM_SysCtlReset:                        @ DATA XREF: ROM:0100044C↑o
                LDR     R1, =0xE000ED0C
                LDR     R0, =0x5FA0004
                STR     R0, [R1]

loc_10013F4:                            @ CODE XREF: ROM_SysCtlReset:loc_10013F4↓j
                B       loc_10013F4
@ End of function ROM_SysCtlReset


@ =============== S U B R O U T I N E =======================================

@ Attributes: thunk

@ void ROM_SysCtlSleep(void)
ROM_SysCtlSleep:                        @ DATA XREF: ROM:ROM_SYSCTLTABLE↑o
                B.W     BootLoader_wait_for_interrupt
@ End of function ROM_SysCtlSleep


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlDeepSleep:                    @ DATA XREF: ROM:01000450↑o
                PUSH    {R4,LR}
                LDR     R4, =0xE000ED10
                LDR     R0, [R4]
                ORR.W   R0, R0, #4
                STR     R0, [R4]
                BL      BootLoader_wait_for_interrupt
                LDR     R0, [R4]
                BIC.W   R0, R0, #4
                STR     R0, [R4]
                POP     {R4,PC}
@ End of function ROM_SysCtlDeepSleep


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlResetCauseGet:                @ DATA XREF: ROM:01000454↑o
                LDR     R0, =0x400FE000
                LDR     R0, [R0,#0x5C]
                BX      LR
@ End of function ROM_SysCtlResetCauseGet


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlResetCauseClear:              @ DATA XREF: ROM:01000458↑o
                LDR     R1, =0x400FE000
                LDR     R2, [R1,#0x5C]
                BIC.W   R0, R2, R0
                STR     R0, [R1,#0x5C]
                BX      LR
@ End of function ROM_SysCtlResetCauseClear


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlClockSet:                     @ DATA XREF: ROM:0100045C↑o
                PUSH.W  {R4-R8,LR}
                LDR     R4, =0x400FE000
                MOV     R5, R0
                LDR     R1, [R4,#0x60]
                LDR     R0, [R4,#0x70]
                BIC.W   R1, R1, #0x400000
                ORR.W   R6, R1, #0x800
                ORR.W   R7, R0, #0x800
                STR     R6, [R4,#0x60]
                STR     R7, [R4,#0x70]
                TST.W   R6, #2
                Beq     loc_100144E
                TST.W   R5, #2
                Beq     loc_1001458

loc_100144E:                            @ CODE XREF: ROM_SysCtlClockSet+20↑j
                BIC.W   R0, R6, R5
                TST.W   R0, #1
                Beq     loc_1001482

loc_1001458:                            @ CODE XREF: ROM_SysCtlClockSet+26↑j
                ORN.W   R0, R5, #3
                ANDS    R6, R0
                STR     R6, [R4,#0x60]
                TST.W   R7, #0x80000000
                Beq     loc_100147A
                AND.W   R0, R7, #0x70
                CMP     R0, #0x30 @ '0'
                ITTE ne
                MOVne   R0, #0x70 @ 'p'
                BICSne.W R0, R0, R7
                MOVeq.W R0, #0x1000
                Beq     loc_100147E

loc_100147A:                            @ CODE XREF: ROM_SysCtlClockSet+3E↑j
                MOV.W   R0, #0x80000

loc_100147E:                            @ CODE XREF: ROM_SysCtlClockSet+52↑j
                BL      delay_loop_r0

loc_1001482:                            @ CODE XREF: ROM_SysCtlClockSet+30↑j
                BIC.W   R0, R6, #0x7F0
                MOVW    R1, #0x37F0
                BIC.W   R0, R0, #0x3000
                ANDS    R1, R5
                ORR.W   R8, R1, R0
                LDR     R0, =0x7FFFDF8F
                LDR     R1, =0x80002030
                ANDS    R0, R7
                ANDS    R1, R5
                ORRS    R0, R1
                AND.W   R1, R5, #8
                ORR.W   R6, R0, R1,LSL#3
                MOVS    R0, #0x40 @ '@'
                STR     R0, [R4,#0x58]
                TST.W   R6, #0x80000000
                IT ne
                STRne   R6, [R4,#0x70]
                STR.W   R8, [R4,#0x60]
                IT eq
                STReq   R6, [R4,#0x70]
                MOVS    R0, #0x10
                BL      delay_loop_r0
                LDR     R1, =0x7C00003
                BIC.W   R0, R8, #3
                ANDS    R1, R5
                BIC.W   R0, R0, #0x7C00000
                ORR.W   R2, R1, R0
                BIC.W   R0, R6, #0x1F800000
                AND.W   R1, R5, #0x1F800000
                ORR.W   R3, R1, R0
                TST.W   R5, #0x800
                Bne     loc_10014FA
                MOV.W   R0, #0x8000

loc_10014E6:                            @ CODE XREF: ROM_SysCtlClockSet+CA↓j
                LDR     R1, [R4,#0x50]
                TST.W   R1, #0x40
                Bne     loc_10014F2
                SUBS    R0, R0, #1
                Bne     loc_10014E6

loc_10014F2:                            @ CODE XREF: ROM_SysCtlClockSet+C6↑j
                BIC.W   R2, R2, #0x800
                BIC.W   R3, R3, #0x800

loc_10014FA:                            @ CODE XREF: ROM_SysCtlClockSet+BA↑j
                STR     R2, [R4,#0x60]
                STR     R3, [R4,#0x70]
                POP.W   {R4-R8,LR}
                MOVS    R0, #0x10
                B.W     delay_loop_r0
@ End of function ROM_SysCtlClockSet


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlClockGet:                     @ DATA XREF: ROM:01000460↑o
                PUSH    {R4}
                LDR     R3, =0x400FE000
                LDR     R2, [R3,#0x60]
                LDR     R1, [R3,#0x70]
                TST.W   R1, #0x80000000
                ITE eq
                ANDeq.W R0, R2, #0x30
                ANDne.W R0, R1, #0x70
                CMP     R0, #0x20 @ ' '
                IT eq
                LDReq   R0, =0x2DC6C0
                Beq     loc_100155C
                Bgt     loc_1001534
                CBZ     R0, loc_100154E
                CMP     R0, #0x10
                IT eq
                LDReq   R0, =0xB71B00
                Beq     loc_100155C
                B       loc_1001548
@ ---------------------------------------------------------------------------

loc_1001534:                            @ CODE XREF: ROM_SysCtlClockGet+1E↑j
                CMP     R0, #0x30 @ '0'
                IT eq
                MOVeqW  R0, #0x7530
                Beq     loc_100155C
                CMP     R0, #0x70 @ 'p'
                IT eq
                MOVeq.W R0, #0x8000
                Beq     loc_100155C

loc_1001548:                            @ CODE XREF: ROM_SysCtlClockGet+2A↑j
                POP     {R4}
                MOVS    R0, #0
                BX      LR
@ ---------------------------------------------------------------------------

loc_100154E:                            @ CODE XREF: ROM_SysCtlClockGet+20↑j
                LDR.W   R12, =sysclk_table
                AND.W   R0, R2, #0x7C0
                ADD.W   R0, R12, R0,LSR#4
                LDR     R0, [R0]

loc_100155C:                            @ CODE XREF: ROM_SysCtlClockGet+1C↑j
                                        @ ROM_SysCtlClockGet+28↑j ...
                TST.W   R1, #0x80000000
                Beq     loc_1001568
                TST.W   R1, #0x800
                Beq     loc_1001576

loc_1001568:                            @ CODE XREF: ROM_SysCtlClockGet+58↑j
                AND.W   R12, R1, #0x80000000
                AND.W   R4, R2, #0x800
                ORRS.W  R12, R12, R4
                Bne     loc_10015A0

loc_1001576:                            @ CODE XREF: ROM_SysCtlClockGet+5E↑j
                LDR     R3, [R3,#0x64]
                UBFX.W  R12, R3, #5, #9
                MUL.W   R0, R0, R12
                AND.W   R12, R3, #0x1F
                ADD.W   R12, R12, #1
                MOV.W   R12, R12,LSL#1
                UDIV.W  R0, R0, R12
                TST.W   R3, #0x4000
                IT ne
                LSRne   R0, R0, #1
                TST.W   R3, #0x8000
                IT ne
                LSRne   R0, R0, #2

loc_10015A0:                            @ CODE XREF: ROM_SysCtlClockGet+6C↑j
                TST.W   R2, #0x400000
                ITT eq
                POPeq   {R4}
                BXeq    LR
                TST.W   R1, #0x80000000
                ITTTT ne
                UBFXne.W R1, R1, #0x17, #6
                ADDne   R1, R1, #1
                UDIVne.W R0, R0, R1
                POPne   {R4}
                IT ne
                BXne    LR
                UBFX.W  R1, R2, #0x17, #4
                ADDS    R1, R1, #1
                UDIV.W  R0, R0, R1
                POP     {R4}
                BX      LR
@ End of function ROM_SysCtlClockGet


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlPWMClockSet:                  @ DATA XREF: ROM:01000464↑o
                LDR     R1, =0x400FE000
                LDR     R2, [R1,#0x60]
                BIC.W   R2, R2, #0x1E0000
                ORRS    R0, R2
                STR     R0, [R1,#0x60]
                BX      LR
@ End of function ROM_SysCtlPWMClockSet


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlPWMClockGet:                  @ DATA XREF: ROM:01000468↑o
                LDR     R0, =0x400FE000
                LDR     R1, [R0,#0x60]
                TST.W   R1, #0x100000
                ITTE ne
                LDRne   R0, [R0,#0x60]
                ANDne.W R0, R0, #0x1E0000
                MOVeq   R0, #0
                BX      LR
@ End of function ROM_SysCtlPWMClockGet


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlADCSpeedSet:                  @ DATA XREF: ROM:0100046C↑o
                LDR     R1, =0x400FE100
                LDR     R2, [R1]
                BIC.W   R2, R2, #0xF00
                ORRS    R2, R0
                STR     R2, [R1]
                LDR     R2, [R1,#0x10]
                BIC.W   R2, R2, #0xF00
                ORRS    R2, R0
                STR     R2, [R1,#0x10]
                LDR     R2, [R1,#0x20]
                BIC.W   R2, R2, #0xF00
                ORRS    R0, R2
                STR     R0, [R1,#0x20]
                BX      LR
@ End of function ROM_SysCtlADCSpeedSet


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlADCSpeedGet:                  @ DATA XREF: ROM:01000470↑o
                LDR     R0, =0x400FE100
                LDR     R0, [R0]
                AND.W   R0, R0, #0xF00
                BX      LR
@ End of function ROM_SysCtlADCSpeedGet


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlGPIOAHBEnable:                @ DATA XREF: ROM:01000474↑o
                LDR     R1, =0x400FE000
                LDR     R2, [R1,#0x6C]
                UXTB    R0, R0
                ORRS    R0, R2
                STR     R0, [R1,#0x6C]
                BX      LR
@ End of function ROM_SysCtlGPIOAHBEnable


@ =============== S U B R O U T I N E =======================================


ROM_SysCtlGPIOAHBDisable:               @ DATA XREF: ROM:01000478↑o
                LDR     R1, =0x400FE000
                LDR     R2, [R1,#0x6C]
                UXTB    R0, R0
                BIC.W   R0, R2, R0
                STR     R0, [R1,#0x6C]
                BX      LR
@ End of function ROM_SysCtlGPIOAHBDisable


@ =============== S U B R O U T I N E =======================================


@ void ROM_SysTickEnable(void)
ROM_SysTickEnable:                      @ CODE XREF: BootLoader_detect_hardware+4A↓p
                                        @ DATA XREF: ROM:01000504↑o
                MOV.W   R0, #0xE000E000
                LDR     R1, [R0,#0x10]
                ORR.W   R1, R1, #5
                STR     R1, [R0,#0x10]
                BX      LR
@ End of function ROM_SysTickEnable


@ =============== S U B R O U T I N E =======================================


ROM_SysTickDisable:                     @ DATA XREF: ROM:01000508↑o
                MOV.W   R0, #0xE000E000
                LDR     R1, [R0,#0x10]
                BIC.W   R1, R1, #1
                STR     R1, [R0,#0x10]
                BX      LR
@ End of function ROM_SysTickDisable


@ =============== S U B R O U T I N E =======================================


ROM_SysTickIntEnable:                   @ DATA XREF: ROM:0100050C↑o
                MOV.W   R0, #0xE000E000
                LDR     R1, [R0,#0x10]
                ORR.W   R1, R1, #2
                STR     R1, [R0,#0x10]
                BX      LR
@ End of function ROM_SysTickIntEnable


@ =============== S U B R O U T I N E =======================================


ROM_SysTickIntDisable:                  @ DATA XREF: ROM:01000510↑o
                MOV.W   R0, #0xE000E000
                LDR     R1, [R0,#0x10]
                BIC.W   R1, R1, #2
                STR     R1, [R0,#0x10]
                BX      LR
@ End of function ROM_SysTickIntDisable

@ ---------------------------------------------------------------------------
                .byte    0
                .byte    0
off_1001670:    .long 0x400FE000        @ DATA XREF: ROM_SysCtlSRAMSizeGet↑r
                                        @ ROM_SysCtlFlashSizeGet↑r ...
off_1001674:    .long SYSCTL_DC_REGS    @ DATA XREF: ROM_SysCtlPeripheralPresent+2↑r
off_1001678:    .long SYSCTL_SRCR_REGS  @ DATA XREF: ROM_SysCtlPeripheralReset+4↑r
off_100167C:    .long SYSCTL_RCGC_REGS  @ DATA XREF: ROM_SysCtlPeripheralEnable↑r
                                        @ ROM_SysCtlPeripheralDisable↑r
off_1001680:    .long SYSCTL_SCGC_REGS  @ DATA XREF: ROM_SysCtlPeripheralSleepEnable↑r
                                        @ ROM_SysCtlPeripheralSleepDisable↑r
off_1001684:    .long SYSCTL_DCGC_REGS  @ DATA XREF: ROM_SysCtlPeripheralDeepSleepEnable↑r
                                        @ ROM_SysCtlPeripheralDeepSleepDisable↑r
dword_1001688:  .long 0x5FA0004         @ DATA XREF: ROM_SysCtlReset+2↑r
off_100168C:    .long 0xE000ED0C        @ DATA XREF: ROM_SysCtlReset↑r
off_1001690:    .long 0xE000ED10        @ DATA XREF: ROM_SysCtlDeepSleep+2↑r
dword_1001694:  .long 0x7FFFDF8F        @ DATA XREF: ROM_SysCtlClockSet+6E↑r
dword_1001698:  .long 0x80002030        @ DATA XREF: ROM_SysCtlClockSet+70↑r
dword_100169C:  .long 0x7C00003         @ DATA XREF: ROM_SysCtlClockSet+9A↑r
dword_10016A0:  .long 0x2DC6C0          @ DATA XREF: ROM_SysCtlClockGet+1A↑r
dword_10016A4:  .long 0xB71B00          @ DATA XREF: ROM_SysCtlClockGet+26↑r
off_10016A8:    .long sysclk_table      @ DATA XREF: ROM_SysCtlClockGet:loc_100154E↑r
off_10016AC:    .long 0x400FE100        @ DATA XREF: ROM_SysCtlADCSpeedSet↑r
                                        @ ROM_SysCtlADCSpeedGet↑r

@ =============== S U B R O U T I N E =======================================


@ void __cdecl ROM_SysTickPeriodSet(unsigned int ulPeriod)
ROM_SysTickPeriodSet:                   @ CODE XREF: BootLoader_detect_hardware+46↓p
                                        @ DATA XREF: ROM:01000514↑o
                SUBS    R0, R0, #1
                MOV.W   R1, #0xE000E000
                STR     R0, [R1,#0x14]
                BX      LR
@ End of function ROM_SysTickPeriodSet


@ =============== S U B R O U T I N E =======================================


ROM_SysTickPeriodGet:                   @ DATA XREF: ROM:01000518↑o
                MOV.W   R0, #0xE000E000
                LDR     R0, [R0,#0x14]
                ADDS    R0, R0, #1
                BX      LR
@ End of function ROM_SysTickPeriodGet


@ =============== S U B R O U T I N E =======================================


ROM_SysTickValueGet:                    @ DATA XREF: ROM:ROM_SYSTICKTABLE↑o
                MOV.W   R0, #0xE000E000
                LDR     R0, [R0,#0x18]
                BX      LR
@ End of function ROM_SysTickValueGet


@ =============== S U B R O U T I N E =======================================


ROM_TimerEnable:                        @ DATA XREF: ROM:01000544↑o
                LDR     R2, [R0,#0xC]
                MOVW    R3, #0x101
                ANDS    R1, R3
                ORRS    R1, R2
                STR     R1, [R0,#0xC]
                BX      LR
@ End of function ROM_TimerEnable


@ =============== S U B R O U T I N E =======================================


ROM_TimerDisable:                       @ DATA XREF: ROM:01000548↑o
                LDR     R2, [R0,#0xC]
                MOVW    R3, #0x101
                ANDS    R1, R3
                BIC.W   R1, R2, R1
                STR     R1, [R0,#0xC]
                BX      LR
@ End of function ROM_TimerDisable


@ =============== S U B R O U T I N E =======================================


ROM_TimerConfigure:                     @ DATA XREF: ROM:0100054C↑o
                LDR     R2, [R0,#0xC]
                BIC.W   R2, R2, #1
                BIC.W   R2, R2, #0x100
                STR     R2, [R0,#0xC]
                LSRS    R2, R1, #0x18
                STR     R2, [R0]
                UXTB    R2, R1
                STR     R2, [R0,#4]
                UBFX.W  R1, R1, #8, #8
                STR     R1, [R0,#8]
                BX      LR
@ End of function ROM_TimerConfigure


@ =============== S U B R O U T I N E =======================================


ROM_TimerControlLevel:                  @ DATA XREF: ROM:01000550↑o
                MOVW    R3, #0x4040
                ANDS    R1, R3
                CMP     R2, #0
                LDR     R2, [R0,#0xC]
                ITE eq
                BICeq.W R1, R2, R1
                ORRne   R1, R2
                STR     R1, [R0,#0xC]
                BX      LR
@ End of function ROM_TimerControlLevel


@ =============== S U B R O U T I N E =======================================


ROM_TimerControlTrigger:                @ DATA XREF: ROM:01000554↑o
                MOVW    R3, #0x2020
                ANDS    R1, R3
                CMP     R2, #0
                LDR     R2, [R0,#0xC]
                ITE eq
                BICeq.W R1, R2, R1
                ORRne   R1, R2
                STR     R1, [R0,#0xC]
                BX      LR
@ End of function ROM_TimerControlTrigger


@ =============== S U B R O U T I N E =======================================


ROM_TimerControlStall:                  @ DATA XREF: ROM:01000558↑o
                ANDS    R1, R2
                MOVW    R2, #0xC0C
                ANDS    R1, R2
                LDR     R2, [R0,#0xC]
                BIC.W   R2, R2, #0xC
                BIC.W   R2, R2, #0xC00
                ORRS    R1, R2
                STR     R1, [R0,#0xC]
                BX      LR
@ End of function ROM_TimerControlStall


@ =============== S U B R O U T I N E =======================================


ROM_TimerRTCEnable:                     @ DATA XREF: ROM:0100055C↑o
                MOVW    R3, #0x202
                ANDS    R1, R3
                CMP     R2, #0
                LDR     R2, [R0,#0xC]
                ITE eq
                BICeq.W R1, R2, R1
                ORRne   R1, R2
                STR     R1, [R0,#0xC]
                BX      LR
@ End of function ROM_TimerRTCEnable


@ =============== S U B R O U T I N E =======================================


ROM_TimerRTCDisable:                    @ DATA XREF: ROM:01000560↑o
                LDR     R1, [R0,#0xC]
                ORR.W   R1, R1, #0x10
                STR     R1, [R0,#0xC]
                BX      LR
@ End of function ROM_TimerRTCDisable


@ =============== S U B R O U T I N E =======================================


ROM_TimerPrescaleSet:                   @ DATA XREF: ROM:01000564↑o
                LDR     R1, [R0,#0xC]
                BIC.W   R1, R1, #0x10
                STR     R1, [R0,#0xC]
                BX      LR
@ End of function ROM_TimerPrescaleSet


@ =============== S U B R O U T I N E =======================================


ROM_TimerPrescaleGet:                   @ DATA XREF: ROM:01000568↑o
                TST.W   R1, #0xFF
                IT ne
                STRne   R2, [R0,#0x38]
                TST.W   R1, #0xFF00
                IT ne
                STRne   R2, [R0,#0x3C]
                BX      LR
@ End of function ROM_TimerPrescaleGet


@ =============== S U B R O U T I N E =======================================


ROM_TimerPrescaleMatchSet:              @ DATA XREF: ROM:0100056C↑o
                CMP     R1, #0xFF
                ITE ne
                LDRne   R0, [R0,#0x3C]
                LDReq   R0, [R0,#0x38]
                BX      LR
@ End of function ROM_TimerPrescaleMatchSet


@ =============== S U B R O U T I N E =======================================


ROM_TimerPrescaleMatchGet:              @ DATA XREF: ROM:01000570↑o
                TST.W   R1, #0xFF
                IT ne
                STRne   R2, [R0,#0x40]
                TST.W   R1, #0xFF00
                IT ne
                STRne   R2, [R0,#0x44]
                BX      LR
@ End of function ROM_TimerPrescaleMatchGet


@ =============== S U B R O U T I N E =======================================


ROM_TimerLoadSet:                       @ DATA XREF: ROM:01000574↑o
                CMP     R1, #0xFF
                ITE ne
                LDRne   R0, [R0,#0x44]
                LDReq   R0, [R0,#0x40]
                BX      LR
@ End of function ROM_TimerLoadSet


@ =============== S U B R O U T I N E =======================================


ROM_TimerLoadGet:                       @ DATA XREF: ROM:01000578↑o
                TST.W   R1, #0xFF
                IT ne
                STRne   R2, [R0,#0x28]
                TST.W   R1, #0xFF00
                IT ne
                STRne   R2, [R0,#0x2C]
                BX      LR
@ End of function ROM_TimerLoadGet


@ =============== S U B R O U T I N E =======================================


ROM_TimerValueGet:                      @ DATA XREF: ROM:0100057C↑o
                CMP     R1, #0xFF
                ITE ne
                LDRne   R0, [R0,#0x2C]
                LDReq   R0, [R0,#0x28]
                BX      LR
@ End of function ROM_TimerValueGet


@ =============== S U B R O U T I N E =======================================


ROM_TimerMatchSet:                      @ DATA XREF: ROM:01000580↑o
                CMP     R1, #0xFF
                ITE ne
                LDRne   R0, [R0,#0x4C]
                LDReq   R0, [R0,#0x48]
                BX      LR
@ End of function ROM_TimerMatchSet


@ =============== S U B R O U T I N E =======================================


ROM_TimerMatchGet:                      @ DATA XREF: ROM:01000584↑o
                TST.W   R1, #0xFF
                IT ne
                STRne   R2, [R0,#0x30]
                TST.W   R1, #0xFF00
                IT ne
                STRne   R2, [R0,#0x34]
                BX      LR
@ End of function ROM_TimerMatchGet


@ =============== S U B R O U T I N E =======================================


ROM_TimerIntEnable:                     @ DATA XREF: ROM:01000588↑o
                CMP     R1, #0xFF
                ITE ne
                LDRne   R0, [R0,#0x34]
                LDReq   R0, [R0,#0x30]
                BX      LR
@ End of function ROM_TimerIntEnable


@ =============== S U B R O U T I N E =======================================


ROM_TimerIntDisable:                    @ DATA XREF: ROM:0100058C↑o
                LDR     R2, [R0,#0x18]
                ORRS    R1, R2
                STR     R1, [R0,#0x18]
                BX      LR
@ End of function ROM_TimerIntDisable


@ =============== S U B R O U T I N E =======================================


ROM_TimerIntStatus:                     @ DATA XREF: ROM:01000590↑o
                LDR     R2, [R0,#0x18]
                BIC.W   R1, R2, R1
                STR     R1, [R0,#0x18]
                BX      LR
@ End of function ROM_TimerIntStatus


@ =============== S U B R O U T I N E =======================================


ROM_TimerControlWaitOnTrigger:          @ DATA XREF: ROM:01000594↑o
                CMP     R1, #0
                ITE eq
                LDReq   R0, [R0,#0x1C]
                LDRne   R0, [R0,#0x20]
                BX      LR
@ End of function ROM_TimerControlWaitOnTrigger


@ =============== S U B R O U T I N E =======================================


ROM_TimerIntClear:                      @ DATA XREF: ROM:ROM_TIMERTABLE↑o
                STR     R1, [R0,#0x24]
                BX      LR
@ End of function ROM_TimerIntClear


@ =============== S U B R O U T I N E =======================================


ROM_UARTParityModeSet:                  @ DATA XREF: ROM:010005C4↑o
                LDR     R2, [R0,#0x2C]
                BIC.W   R2, R2, #0x86
                ORRS    R1, R2
                STR     R1, [R0,#0x2C]
                BX      LR
@ End of function ROM_UARTParityModeSet


@ =============== S U B R O U T I N E =======================================


ROM_UARTParityModeGet:                  @ DATA XREF: ROM:010005C8↑o
                LDR     R0, [R0,#0x2C]
                AND.W   R0, R0, #0x86
                BX      LR
@ End of function ROM_UARTParityModeGet


@ =============== S U B R O U T I N E =======================================


ROM_UARTFIFOLevelSet:                   @ DATA XREF: ROM:010005CC↑o
                ORRS    R1, R2
                STR     R1, [R0,#0x34]
                BX      LR
@ End of function ROM_UARTFIFOLevelSet


@ =============== S U B R O U T I N E =======================================


ROM_UARTFIFOLevelGet:                   @ DATA XREF: ROM:010005D0↑o
                LDR     R0, [R0,#0x34]
                AND.W   R3, R0, #7
                AND.W   R0, R0, #0x38
                STR     R3, [R1]
                STR     R0, [R2]
                BX      LR
@ End of function ROM_UARTFIFOLevelGet


@ =============== S U B R O U T I N E =======================================


ROM_UARTEnable:                         @ CODE XREF: ROM_UARTConfigSetExpClk+36↓j
                                        @ DATA XREF: ROM:010005DC↑o
                LDR     R1, [R0,#0x2C]
                ORR.W   R1, R1, #0x10
                STR     R1, [R0,#0x2C]
                LDR     R1, [R0,#0x30]
                MOVW    R2, #0x301
                ORRS    R1, R2
                STR     R1, [R0,#0x30]
                BX      LR
@ End of function ROM_UARTEnable


@ =============== S U B R O U T I N E =======================================


ROM_UARTDisable:                        @ CODE XREF: ROM_UARTDisable+6↓j
                                        @ ROM_UARTConfigSetExpClk+6↓p
                                        @ DATA XREF: ...
                LDR     R1, [R0,#0x18]
                TST.W   R1, #8
                Bne     ROM_UARTDisable
                LDR     R1, [R0,#0x2C]
                BIC.W   R1, R1, #0x10
                STR     R1, [R0,#0x2C]
                LDR     R1, [R0,#0x30]
                BIC.W   R1, R1, #1
                BIC.W   R1, R1, #0x300
                STR     R1, [R0,#0x30]
                BX      LR
@ End of function ROM_UARTDisable


@ =============== S U B R O U T I N E =======================================


ROM_UARTConfigSetExpClk:                @ DATA XREF: ROM:010005D4↑o
                PUSH    {R4,LR}
                MOV     R12, R0
                MOV     R4, R1
                BL      ROM_UARTDisable
                LSLS    R0, R2, #4
                UDIV.W  R1, R4, R0
                MLS.W   R0, R0, R1, R4
                LSLS    R0, R0, #3
                UDIV.W  R0, R0, R2
                ADDS    R0, R0, #1
                LSRS    R0, R0, #1
                STR.W   R1, [R12,#0x24]
                STR.W   R0, [R12,#0x28]
                STR.W   R3, [R12,#0x2C]
                MOVS    R0, #0
                STR.W   R0, [R12,#0x18]
                POP.W   {R4,LR}
                MOV     R0, R12
                B       ROM_UARTEnable
@ End of function ROM_UARTConfigSetExpClk


@ =============== S U B R O U T I N E =======================================


ROM_UARTConfigGetExpClk:                @ DATA XREF: ROM:010005D8↑o
                PUSH    {R4}
                LDR     R4, [R0,#0x24]
                LDR.W   R12, [R0,#0x28]
                LSLS    R1, R1, #2
                ADD.W   R12, R12, R4,LSL#6
                UDIV.W  R1, R1, R12
                STR     R1, [R2]
                LDR     R0, [R0,#0x2C]
                AND.W   R0, R0, #0xEE
                STR     R0, [R3]
                POP     {R4}
                BX      LR
@ End of function ROM_UARTConfigGetExpClk


@ =============== S U B R O U T I N E =======================================


ROM_UARTEnableSIR:                      @ DATA XREF: ROM:010005E4↑o
                SUB.W   R2, R0, #0x40000000
                SUBS.W  R2, R2, #0xE000
                IT ne
                BXne    LR
                CMP     R1, #0
                LDR     R1, [R0,#0x30]
                ITE eq
                ORReq.W R1, R1, #2
                ORRne.W R1, R1, #6
                STR     R1, [R0,#0x30]
                BX      LR
@ End of function ROM_UARTEnableSIR


@ =============== S U B R O U T I N E =======================================


ROM_UARTDisableSIR:                     @ DATA XREF: ROM:010005E8↑o
                SUB.W   R1, R0, #0x40000000
                SUBS.W  R1, R1, #0xE000
                ITTT eq
                LDReq   R1, [R0,#0x30]
                BICeq.W R1, R1, #6
                STReq   R1, [R0,#0x30]
                BX      LR
@ End of function ROM_UARTDisableSIR


@ =============== S U B R O U T I N E =======================================


ROM_UARTCharsAvail:                     @ DATA XREF: ROM:010005EC↑o
                LDR     R0, [R0,#0x18]
                MOVS    R1, #1
                BIC.W   R0, R1, R0,LSR#4
                BX      LR
@ End of function ROM_UARTCharsAvail


@ =============== S U B R O U T I N E =======================================


ROM_UARTSpaceAvail:                     @ DATA XREF: ROM:010005F0↑o
                LDR     R0, [R0,#0x18]
                MOVS    R1, #1
                BIC.W   R0, R1, R0,LSR#5
                BX      LR
@ End of function ROM_UARTSpaceAvail


@ =============== S U B R O U T I N E =======================================


ROM_UARTCharGetNonBlocking:             @ DATA XREF: ROM:010005F4↑o
                LDR     R1, [R0,#0x18]
                TST.W   R1, #0x10
                ITE ne
                MOVne.W R0, #0xFFFFFFFF
                LDReq   R0, [R0]
                BX      LR
@ End of function ROM_UARTCharGetNonBlocking


@ =============== S U B R O U T I N E =======================================


ROM_UARTCharGet:                        @ CODE XREF: ROM_UARTCharGet+6↓j
                                        @ BootLoader_uart_read_bytes+16↓p
                                        @ DATA XREF: ...
                LDR     R1, [R0,#0x18]
                TST.W   R1, #0x10
                Bne     ROM_UARTCharGet
                LDR     R0, [R0]
                BX      LR
@ End of function ROM_UARTCharGet


@ =============== S U B R O U T I N E =======================================


ROM_UARTCharPutNonBlocking:             @ DATA XREF: ROM:010005FC↑o
                LDR     R2, [R0,#0x18]
                TST.W   R2, #0x20
                ITT ne
                MOVne   R0, #0
                BXne    LR
                STR     R1, [R0]
                MOVS    R0, #1
                BX      LR
@ End of function ROM_UARTCharPutNonBlocking


@ =============== S U B R O U T I N E =======================================


ROM_UARTCharPut:                        @ CODE XREF: ROM_UARTCharPut+6↓j
                                        @ BootLoader_uart_write_bytes+14↓p
                                        @ DATA XREF: ...
                LDR     R2, [R0,#0x18]
                TST.W   R2, #0x20
                Bne     ROM_UARTCharPut
                STR     R1, [R0]
                BX      LR
@ End of function ROM_UARTCharPut


@ =============== S U B R O U T I N E =======================================


ROM_UARTBreakCtl:                       @ DATA XREF: ROM:01000600↑o
                CMP     R1, #0
                LDR     R1, [R0,#0x2C]
                ITE eq
                BICeq.W R1, R1, #1
                ORRne.W R1, R1, #1
                STR     R1, [R0,#0x2C]
                BX      LR
@ End of function ROM_UARTBreakCtl


@ =============== S U B R O U T I N E =======================================


ROM_UARTIntEnable:                      @ DATA XREF: ROM:01000604↑o
                LDR     R2, [R0,#0x38]
                ORRS    R1, R2
                STR     R1, [R0,#0x38]
                BX      LR
@ End of function ROM_UARTIntEnable


@ =============== S U B R O U T I N E =======================================


ROM_UARTIntDisable:                     @ DATA XREF: ROM:01000608↑o
                LDR     R2, [R0,#0x38]
                BIC.W   R1, R2, R1
                STR     R1, [R0,#0x38]
                BX      LR
@ End of function ROM_UARTIntDisable


@ =============== S U B R O U T I N E =======================================


ROM_UARTIntStatus:                      @ DATA XREF: ROM:0100060C↑o
                CMP     R1, #0
                ITE eq
                LDReq   R0, [R0,#0x3C]
                LDRne   R0, [R0,#0x40]
                BX      LR
@ End of function ROM_UARTIntStatus


@ =============== S U B R O U T I N E =======================================


ROM_UARTIntClear:                       @ DATA XREF: ROM:01000610↑o
                STR     R1, [R0,#0x44]
                BX      LR
@ End of function ROM_UARTIntClear


@ =============== S U B R O U T I N E =======================================


ROM_WatchdogRunning:                    @ DATA XREF: ROM:01000644↑o
                LDR     R0, [R0,#8]
                AND.W   R0, R0, #1
                BX      LR
@ End of function ROM_WatchdogRunning


@ =============== S U B R O U T I N E =======================================


ROM_WatchdogEnable:                     @ DATA XREF: ROM:01000648↑o
                LDR     R1, [R0,#8]
                ORR.W   R1, R1, #1
                STR     R1, [R0,#8]
                BX      LR
@ End of function ROM_WatchdogEnable


@ =============== S U B R O U T I N E =======================================


ROM_WatchdogResetEnable:                @ DATA XREF: ROM:0100064C↑o
                LDR     R1, [R0,#8]
                ORR.W   R1, R1, #2
                STR     R1, [R0,#8]
                BX      LR
@ End of function ROM_WatchdogResetEnable


@ =============== S U B R O U T I N E =======================================


ROM_WatchdogResetDisable:               @ DATA XREF: ROM:01000650↑o
                LDR     R1, [R0,#8]
                BIC.W   R1, R1, #2
                STR     R1, [R0,#8]
                BX      LR
@ End of function ROM_WatchdogResetDisable


@ =============== S U B R O U T I N E =======================================


ROM_WatchdogLock:                       @ DATA XREF: ROM:01000654↑o
                MOVS    R1, #1
                STR.W   R1, [R0,#0xC00]
                BX      LR
@ End of function ROM_WatchdogLock


@ =============== S U B R O U T I N E =======================================


ROM_WatchdogUnlock:                     @ DATA XREF: ROM:01000658↑o
                LDR     R1, =0x1ACCE551
                STR.W   R1, [R0,#0xC00]
                BX      LR
@ End of function ROM_WatchdogUnlock


@ =============== S U B R O U T I N E =======================================


ROM_WatchdogLockState:                  @ DATA XREF: ROM:0100065C↑o
                LDR.W   R0, [R0,#0xC00]
                CMP     R0, #1
                IT ne
                MOVne   R0, #0
                BX      LR
@ End of function ROM_WatchdogLockState


@ =============== S U B R O U T I N E =======================================


ROM_WatchdogReloadSet:                  @ DATA XREF: ROM:01000660↑o
                STR     R1, [R0]
                BX      LR
@ End of function ROM_WatchdogReloadSet


@ =============== S U B R O U T I N E =======================================


ROM_WatchdogReloadGet:                  @ DATA XREF: ROM:01000664↑o
                LDR     R0, [R0]
                BX      LR
@ End of function ROM_WatchdogReloadGet


@ =============== S U B R O U T I N E =======================================


ROM_WatchdogValueGet:                   @ DATA XREF: ROM:01000668↑o
                LDR     R0, [R0,#4]
                BX      LR
@ End of function ROM_WatchdogValueGet


@ =============== S U B R O U T I N E =======================================


ROM_WatchdogIntEnable:                  @ DATA XREF: ROM:0100066C↑o
                LDR     R1, [R0,#8]
                ORR.W   R1, R1, #1
                STR     R1, [R0,#8]
                BX      LR
@ End of function ROM_WatchdogIntEnable


@ =============== S U B R O U T I N E =======================================


ROM_WatchdogIntStatus:                  @ DATA XREF: ROM:01000670↑o
                CMP     R1, #0
                ITE eq
                LDReq   R0, [R0,#0x10]
                LDRne   R0, [R0,#0x14]
                BX      LR
@ End of function ROM_WatchdogIntStatus


@ =============== S U B R O U T I N E =======================================


ROM_WatchdogIntClear:                   @ DATA XREF: ROM:ROM_WATCHDOGTABLE↑o
                MOVS    R1, #1
                STR     R1, [R0,#0xC]
                BX      LR
@ End of function ROM_WatchdogIntClear


@ =============== S U B R O U T I N E =======================================


ROM_WatchdogStallEnable:                @ DATA XREF: ROM:01000674↑o
                LDR.W   R1, [R0,#0x418]
                ORR.W   R1, R1, #0x100
                STR.W   R1, [R0,#0x418]
                BX      LR
@ End of function ROM_WatchdogStallEnable


@ =============== S U B R O U T I N E =======================================


ROM_WatchdogStallDisable:               @ DATA XREF: ROM:01000678↑o
                LDR.W   R1, [R0,#0x418]
                BIC.W   R1, R1, #0x100
                STR.W   R1, [R0,#0x418]
                BX      LR
@ End of function ROM_WatchdogStallDisable

@ ---------------------------------------------------------------------------
dword_10019F8:  .long 0x1ACCE551        @ DATA XREF: ROM_WatchdogUnlock↑r

@ =============== S U B R O U T I N E =======================================


@ void __cdecl BootLoader_SysTick_Handler()
BootLoader_SysTick_Handler:             @ DATA XREF: BootLoader_hardware_test+10↓o
                LDR     R1, =0x4000441C
                MOVS    R0, #1
                STR     R0, [R1]
                LDR     R2, =SysTick_value_count
                LDR     R0, [R2]
                CMP     R0, #0x14
                IT cs
                BXcs    LR
                MOV.W   R0, #0xE000E000
                LDR     R1, [R0,#0x18]
                LDR     R0, [R2]
                LDR     R3, =SysTick_value_array
                ADD.W   R3, R3, R0,LSL#2
                ADDS    R0, R0, #1
                STR     R0, [R2]
                STR     R1, [R3]
                BX      LR
@ End of function BootLoader_SysTick_Handler


@ =============== S U B R O U T I N E =======================================


@ eHardwareDetect __fastcall BootLoader_hardware_test(__int16 bitmask, int *retValuePtr)
BootLoader_hardware_test:               @ CODE XREF: BootLoader_setup_communication+36↓p
                PUSH.W  {R4-R8,LR}
                MOVS    R4, #0
                LDR     R6, =SysTick_value_count
                MOV     R8, R0
                MOV     R7, R1
                MOV     R5, R4
                STR     R4, [R6]
                ADR.W   R0, (BootLoader_SysTick_Handler+1)
                MOV.W   R1, #0x20000000
                STR     R0, [R1,#(VTOR_TABLE_IN_SRAM+0x40 - 0x20000000)]
                LDR     R1, =0x40004408
                MOVS    R0, #1
                STR     R0, [R1]
                STR     R0, [R1,#0x14]
                STR     R0, [R1,#8]
                TST.W   R8, #1
                ITT ne
                MOVne   R0, #0x10
                BLne    ROM_IntEnable
                LDR     R0, [R6]
                CMP     R0, #0x12
                Bcs     loc_1001A98
                LDR     R1, =0x40008000
                LDR     R0, =0x40020000

loc_1001A5C:                            @ CODE XREF: BootLoader_hardware_test+74↓j
                TST.W   R8, #0x10
                ITT ne
                LDRne   R2, [R1,#0xC]
                TSTne.W R2, #4
                Beq     loc_1001A76
                MOVS    R0, #0x10
                BL      ROM_IntDisable
                MOVS    R0, #2
                POP.W   {R4-R8,PC}
@ ---------------------------------------------------------------------------

loc_1001A76:                            @ CODE XREF: BootLoader_hardware_test+46↑j
                TST.W   R8, #0x1000
                ITT ne
                LDRne.W R2, [R0,#0x804]
                TSTne.W R2, #1
                Beq     loc_1001A92
                MOVS    R0, #0x10
                BL      ROM_IntDisable
                MOVS    R0, #3
                POP.W   {R4-R8,PC}
@ ---------------------------------------------------------------------------

loc_1001A92:                            @ CODE XREF: BootLoader_hardware_test+62↑j
                LDR     R2, [R6]
                CMP     R2, #0x12
                Bcc     loc_1001A5C

loc_1001A98:                            @ CODE XREF: BootLoader_hardware_test+34↑j
                MOVS    R0, #0x10
                BL      ROM_IntDisable
                LDR     R1, [R6]
                MOVS    R0, #0
                SUBS    R1, R1, #1
                LDR     R3, =SysTick_value_array
                CMP     R0, R1
                Bcs     loc_1001AD2

loc_1001AAA:                            @ CODE XREF: BootLoader_hardware_test+AE↓j
                LDR.W   R1, [R3,R0,LSL#2]
                ADD.W   R2, R3, R0,LSL#2
                LDR.W   R12, [R2,#4]
                LDR     R2, [R2,#4]
                CMP     R12, R1
                SUB.W   R1, R1, R2
                IT gt
                ADDgt.W R1, R1, #0x1000000
                STR.W   R1, [R3,R0,LSL#2]
                LDR     R1, [R6]
                ADDS    R0, R0, #1
                SUBS    R1, R1, #1
                CMP     R0, R1
                Bcc     loc_1001AAA

loc_1001AD2:                            @ CODE XREF: BootLoader_hardware_test+86↑j
                LDR     R1, [R6]
                MOVS    R0, #0
                SUBS    R1, R1, #1
                CMP     R0, R1
                Bcs     loc_1001B2E

loc_1001ADC:                            @ CODE XREF: BootLoader_hardware_test+10A↓j
                LDR.W   R1, [R3,R0,LSL#2]
                ADD.W   R2, R3, R0,LSL#2
                LDR.W   R12, [R2,#4]
                SUBS.W  R1, R1, R12
                IT mi
                NEGmi   R1, R1
                ADD.W   R1, R1, R1,LSL#1
                LDR     R2, [R2,#4]
                CMP     R1, R2
                ITT ge
                MOVge   R4, #0
                MOVge   R5, R4
                Bge     loc_1001B24
                LDR.W   R1, [R3,R0,LSL#2]
                ADDS    R4, R4, #1
                ADD     R5, R1
                CMP     R4, #7
                Bne     loc_1001B24
                LDR.W   R0, [R3,R0,LSL#2]
                ADDS    R1, R0, R5
                ASRS    R0, R1, #1
                STR     R0, [R7]

loc_1001B16:                            @ CODE XREF: BootLoader_hardware_test+FA↓j
                MOVS    R0, R1
                SUB.W   R1, R1, #1
                Bne     loc_1001B16
                MOVS    R0, #1
                POP.W   {R4-R8,PC}
@ ---------------------------------------------------------------------------

loc_1001B24:                            @ CODE XREF: BootLoader_hardware_test+DC↑j
                                        @ BootLoader_hardware_test+E8↑j
                LDR     R1, [R6]
                ADDS    R0, R0, #1
                SUBS    R1, R1, #1
                CMP     R0, R1
                Bcc     loc_1001ADC

loc_1001B2E:                            @ CODE XREF: BootLoader_hardware_test+B8↑j
                MOVS    R0, #0
                POP.W   {R4-R8,PC}
@ End of function BootLoader_hardware_test

@ ---------------------------------------------------------------------------
off_1001B34:    .long 0x4000441C        @ DATA XREF: BootLoader_SysTick_Handler↑r
off_1001B38:    .long SysTick_value_count
                                        @ DATA XREF: BootLoader_SysTick_Handler+6↑r
                                        @ BootLoader_hardware_test+6↑r
off_1001B3C:    .long SysTick_value_array
                                        @ DATA XREF: BootLoader_SysTick_Handler+18↑r
                                        @ BootLoader_hardware_test+82↑r
off_1001B40:    .long 0x40004408        @ DATA XREF: BootLoader_hardware_test+1A↑r
off_1001B44:    .long 0x40008000        @ DATA XREF: BootLoader_hardware_test+36↑r
off_1001B48:    .long 0x40020000        @ DATA XREF: BootLoader_hardware_test+38↑r

@ =============== S U B R O U T I N E =======================================


@ unsigned int __fastcall BootLoader_swap_32bits(unsigned int *a1)
BootLoader_swap_32bits:                 @ CODE XREF: BootLoader_receive_packets+5A↓p
                                        @ BootLoader_receive_packets+62↓p ...
                LDR     R0, [R0]
                REV     R0, R0
                BX      LR
@ End of function BootLoader_swap_32bits


@ =============== S U B R O U T I N E =======================================


@ void BootLoader_detect_hardware(void)
BootLoader_detect_hardware:             @ CODE XREF: __RESET_ROM_Update__+4↑p
                PUSH    {R4,LR}
                LDR     R0, =0x400FE0F0 @ FLASH_RMCTL
                MOVS    R1, #1
                STR     R1, [R0]
                MOVW    R1, #0x1011
                STR     R1, [R0,#0x14]  @ SYSCTL_RCGC1_R
                MOVS    R1, #3
                STR     R1, [R0,#0x18]  @ SYSCTL_RCGC2_R
                MOVS    R3, #0xA        @ ulPadType
                MOVS    R2, #1          @ ulStrength
                MOVS    R1, #0x3F @ '?' @ ucPins
                MOV.W   R0, #0x40004000 @ ulPort
                BL      ROM_GPIOPadConfigSet
                LDR     R4, =0x40005000
                MOVS    R3, #9          @ ulPadType
                MOVS    R2, #1          @ ulStrength
                MOVS    R1, #0xC        @ ucPins
                MOV     R0, R4          @ ulPort
                BL      ROM_GPIOPadConfigSet
                MOVS    R2, #2          @ ulPinIO
                MOVS    R1, #0x3F @ '?' @ ucPins
                MOV.W   R0, #0x40004000 @ ulPort
                BL      ROM_GPIODirModeSet
                MOVS    R2, #2          @ ulPinIO
                MOVS    R1, #0xC        @ ucPins
                MOV     R0, R4          @ ulPort
                BL      ROM_GPIODirModeSet
                MOVS    R0, #0          @ ulPeriod
                BL      ROM_SysTickPeriodSet
                BL      ROM_SysTickEnable
                POP.W   {R4,LR}
                MOVS    R0, #0x10       @ ulClocks
                B.W     ROM_FlashUsecSet
@ End of function BootLoader_detect_hardware


@ =============== S U B R O U T I N E =======================================


@ void BootLoader_setup_communication_i2c(void)
BootLoader_setup_communication_i2c:     @ CODE XREF: ROM_UpdateI2C+4↑p
                                        @ BootLoader_setup_communication:loc_1001C1C↓p
                LDR     R0, =response_package_buffer
                LDR     R1, =(BootLoader_i2c_write_bytes+1)
                STR     R1, [R0,#(funcptr_write_bytes - 0x20000098)]
                LDR     R1, =(BootLoader_i2c_read_bytes+1)
                STR     R1, [R0,#(funcptr_read_bytes - 0x20000098)]
                LDR     R1, =(BootLoader_i2c_wait_send_done+1)
                STR     R1, [R0,#(funcptr_wait_send_done - 0x20000098)]
                BX      LR
@ End of function BootLoader_setup_communication_i2c


@ =============== S U B R O U T I N E =======================================


@ void BootLoader_setup_communication_ssi(void)
BootLoader_setup_communication_ssi:     @ CODE XREF: ROM_UpdateSSI+4↑p
                                        @ BootLoader_setup_communication:loc_1001C26↓p
                LDR     R0, =response_package_buffer
                LDR     R1, =(BootLoader_ssi_write_bytes+1)
                STR     R1, [R0,#(funcptr_write_bytes - 0x20000098)]
                LDR     R1, =(BootLoader_ssi_read_bytes+1)
                STR     R1, [R0,#(funcptr_read_bytes - 0x20000098)]
                LDR     R1, =(BootLoader_ssi_wait_send_done+1)
                STR     R1, [R0,#(funcptr_wait_send_done - 0x20000098)]
                BX      LR
@ End of function BootLoader_setup_communication_ssi


@ =============== S U B R O U T I N E =======================================


@ void BootLoader_setup_communication_uart(void)
BootLoader_setup_communication_uart:    @ CODE XREF: ROM_UpdateUART+4↑p
                                        @ BootLoader_setup_communication+58↓p
                LDR     R0, =response_package_buffer
                LDR     R1, =(BootLoader_uart_write_bytes+1)
                STR     R1, [R0,#(funcptr_write_bytes - 0x20000098)]
                LDR     R1, =(BootLoader_uart_read_bytes+1)
                STR     R1, [R0,#(funcptr_read_bytes - 0x20000098)]
                LDR     R1, =(BootLoader_uart_wait_send_done+1)
                STR     R1, [R0,#(funcptr_wait_send_done - 0x20000098)]
                BX      LR
@ End of function BootLoader_setup_communication_uart


@ =============== S U B R O U T I N E =======================================


@ void BootLoader_setup_communication(void)
BootLoader_setup_communication:         @ CODE XREF: __RESET_ROM_Update__+8↑p

a1              = -8

                PUSH    {R3,LR}
                LDR     R0, =0x400FE000
                LDR     R0, [R0,#0x10]
                MOVW    R1, #0x1011
                ANDS    R0, R1
                STR     R0, [SP,#8+a1]
                TST.W   R0, #0x1000
                Beq     loc_1001BFA
                BL      BootLoader_i2c_setup
                LDR     R0, [SP,#8+a1]
                CMP.W   R0, #0x1000
                Beq     loc_1001C1C

loc_1001BFA:                            @ CODE XREF: BootLoader_setup_communication+12↑j
                LDR     R0, [SP,#8+a1]
                TST.W   R0, #0x10
                Beq     loc_1001C0C
                BL      BootLoader_ssi_setup
                LDR     R0, [SP,#8+a1]
                CMP     R0, #0x10
                Beq     loc_1001C26

loc_1001C0C:                            @ CODE XREF: BootLoader_setup_communication+26↑j
                                        @ BootLoader_setup_communication+3C↓j
                MOV     R1, SP          @ retValuePtr
                LDR     R0, [SP,#8+a1]  @ bitmask
                BL      BootLoader_hardware_test
                CMP     R0, #0
                Beq     loc_1001C0C
                CMP     R0, #3
                Bne     loc_1001C22

loc_1001C1C:                            @ CODE XREF: BootLoader_setup_communication+1E↑j
                BL      BootLoader_setup_communication_i2c
                POP     {R3,PC}
@ ---------------------------------------------------------------------------

loc_1001C22:                            @ CODE XREF: BootLoader_setup_communication+40↑j
                CMP     R0, #2
                Bne     loc_1001C2C

loc_1001C26:                            @ CODE XREF: BootLoader_setup_communication+30↑j
                BL      BootLoader_setup_communication_ssi
                POP     {R3,PC}
@ ---------------------------------------------------------------------------

loc_1001C2C:                            @ CODE XREF: BootLoader_setup_communication+4A↑j
                LDR     R0, [SP,#8+a1]  @ a1
                BL      BootLoader_uart_setup
                BL      BootLoader_setup_communication_uart
                BL      BootLoader_send_ack
                POP     {R3,PC}
@ End of function BootLoader_setup_communication


@ =============== S U B R O U T I N E =======================================


@ void BootLoader_receive_packets(void)
BootLoader_receive_packets:             @ CODE XREF: __RESET_ROM_Update__+C↑j
                                        @ ROM_UpdateI2C+8↑j ...

package_size    = -0x28

                PUSH.W  {R3-R11,LR}
                LDR     R5, =response_package_buffer
                MOV.W   R8, #0
                MOVS    R6, #0x40 @ '@'
                ADD.W   R4, R5, #0x1B
                MOV.W   R9, #0x42 @ 'B'
                MOV.W   R10, #0x44 @ 'D'
                MOVS    R7, #0x43 @ 'C'
                MOV.W   R11, #0x41 @ 'A'
                STR.W   R8, [R5,#(program_size - 0x20000098)]

loc_1001C5E:                            @ CODE XREF: BootLoader_receive_packets+2C↓j
                                        @ BootLoader_receive_packets+46↓j ...
                MOV     R1, SP          @ byteCount
                MOV     R0, R4          @ buffer
                BL      BootLoader_read_package
                CMP     R0, #0
                Bne     loc_1001C5E
                LDRB    R0, [R4]
                SUBS    R0, #0x20 @ ' ' @ switch 6 cases
                CMP     R0, #6
                Bcs     case_default    @ jumptable 01001C72 default case
                TBB.W   [PC,R0]         @ switch jump
@ ---------------------------------------------------------------------------
jpt_1001C72:    .byte 3                 @ jump table for switch statement
                .byte 7
                .byte 0x38
                .byte 0x81
                .byte 0x61
                .byte 0x88
@ ---------------------------------------------------------------------------

case_COMMAND_PING:                      @ CODE XREF: BootLoader_receive_packets+36↑j
                STRB    R6, [R5]        @ jumptable 01001C72 case 32
                BL      BootLoader_send_ack
                B       loc_1001C5E
@ ---------------------------------------------------------------------------

case_COMMAND_DOWNLOAD:                  @ CODE XREF: BootLoader_receive_packets+36↑j
                LDR     R0, [SP,#0x28+package_size] @ jumptable 01001C72 case 33
                CMP     R0, #9
                ITT ne
                STRne.W R8, [R5,#(program_size - 0x20000098)]
                STRBne.W R9, [R5]
                Bne     loc_1001CE0
                ADDS    R0, R4, #1      @ a1
                BL      BootLoader_swap_32bits
                STR     R0, [R5,#(program_address - 0x20000098)]
                ADDS    R0, R4, #5      @ a1
                BL      BootLoader_swap_32bits
                STR     R0, [R5,#(program_size - 0x20000098)]
                BL      ROM_SysCtlFlashSizeGet
                LDR     R1, [R5,#(program_address - 0x20000098)]
                CMP     R1, R0
                Bcs     loc_1001CBC
                LDR     R2, [R5,#(program_size - 0x20000098)]
                ADD     R2, R1
                CMP     R2, R0
                IT ls
                TSTls.W R1, #3
                Beq     loc_1001CC4

loc_1001CBC:                            @ CODE XREF: BootLoader_receive_packets+70↑j
                STR.W   R8, [R5,#(program_size - 0x20000098)]
                STRB    R7, [R5]
                B       loc_1001CE0
@ ---------------------------------------------------------------------------

loc_1001CC4:                            @ CODE XREF: BootLoader_receive_packets+7E↑j
                LDR     R0, =0x400FD000
                MOVS    R1, #1
                STR     R1, [R0,#0x14]
                LDR     R1, =0xA4420004
                STR     R1, [R0,#8]

loc_1001CCE:                            @ CODE XREF: BootLoader_receive_packets+98↓j
                LDR     R1, [R0,#8]
                TST.W   R1, #4
                Bne     loc_1001CCE
                LDR     R0, [R0,#0xC]
                TST.W   R0, #1
                Bne     loc_1001D60
                STRB    R6, [R5]

loc_1001CE0:                            @ CODE XREF: BootLoader_receive_packets+56↑j
                                        @ BootLoader_receive_packets+86↑j ...
                BL      BootLoader_send_ack
                B       loc_1001C5E
@ ---------------------------------------------------------------------------

case_COMMAND_RUN:                       @ CODE XREF: BootLoader_receive_packets+36↑j
                BL      BootLoader_send_ack @ jumptable 01001C72 case 34
                LDR     R0, [SP,#0x28+package_size]
                CMP     R0, #5
                IT ne
                STRBne.W R9, [R5]
                Bne     loc_1001C5E
                ADDS    R0, R4, #1      @ a1
                BL      BootLoader_swap_32bits
                STR     R0, [R5,#(program_address - 0x20000098)]
                BL      ROM_SysCtlFlashSizeGet
                LDR     R1, [R5,#(program_address - 0x20000098)]
                CMP     R1, R0
                IT cs
                STRBcs  R7, [R5]
                Bcs     loc_1001C5E
                LDR     R0, [R5,#(funcptr_wait_send_done - 0x20000098)]
                BLX     R0
                LDR     R0, =0x400FE000
                STR.W   R8, [R0,#0x104]
                STR.W   R8, [R0,#0x108]
                MOVW    R1, #0x1011
                STR     R1, [R0,#0x44]
                MOVS    R1, #3
                STR     R1, [R0,#0x48]
                STR.W   R8, [R0,#0x44]
                STR.W   R8, [R0,#0x48]
                LDR     R0, [R5,#(program_address - 0x20000098)]
                BLX     R0
                LDR     R0, =0xE000ED0C
                LDR     R1, =0x5FA0004
                STR     R1, [R0]

loc_1001D36:                            @ CODE XREF: BootLoader_receive_packets:loc_1001D36↓j
                B       loc_1001D36
@ ---------------------------------------------------------------------------

case_COMMAND_SEND_DATA:                 @ CODE XREF: BootLoader_receive_packets+36↑j
                STRB    R6, [R5]        @ jumptable 01001C72 case 36
                LDR     R0, [SP,#0x28+package_size]
                SUBS    R0, R0, #1
                STR     R0, [SP,#0x28+package_size]
                LDR     R1, [R5,#(program_size - 0x20000098)]
                CMP     R1, R0
                ITT cs
                LDRcs   R1, [R5,#(program_address - 0x20000098)]
                TSTcs.W R1, #3
                IT ne
                STRBne  R7, [R5]
                Bne     loc_1001CE0
                ADDS    R0, R0, #3
                BIC.W   R2, R0, #3
                ADDS    R0, R4, #1
                BL      ROM_FlashProgram
                CBZ     R0, loc_1001D68

loc_1001D60:                            @ CODE XREF: BootLoader_receive_packets+A0↑j
                STRB.W  R10, [R5]
                B       loc_1001CE0
@ ---------------------------------------------------------------------------

case_default:                           @ CODE XREF: BootLoader_receive_packets+34↑j
                B       loc_1001D96     @ jumptable 01001C72 default case
@ ---------------------------------------------------------------------------

loc_1001D68:                            @ CODE XREF: BootLoader_receive_packets+122↑j
                LDR     R1, [R5,#(program_size - 0x20000098)]
                LDR     R0, [SP,#0x28+package_size]
                SUBS    R1, R1, R0
                STR     R1, [R5,#(program_size - 0x20000098)]
                LDR     R1, [R5,#(program_address - 0x20000098)]
                ADD     R0, R1
                STR     R0, [R5,#(program_address - 0x20000098)]
                B       loc_1001CE0
@ ---------------------------------------------------------------------------

case_COMMAND_GET_STATUS:                @ CODE XREF: BootLoader_receive_packets+36↑j
                BL      BootLoader_send_ack @ jumptable 01001C72 case 35
                MOVS    R1, #1          @ byteCount
                LDR     R0, =response_package_buffer @ buffer
                BL      BootLoader_write_package
                B       loc_1001C5E
@ ---------------------------------------------------------------------------

case_COMMAND_RESET:                     @ CODE XREF: BootLoader_receive_packets+36↑j
                BL      BootLoader_send_ack @ jumptable 01001C72 case 37
                LDR     R0, [R5,#(funcptr_wait_send_done - 0x20000098)]
                BLX     R0
                LDR     R1, =0xE000ED0C
                LDR     R0, =0x5FA0004
                STR     R0, [R1]

loc_1001D94:                            @ CODE XREF: BootLoader_receive_packets:loc_1001D94↓j
                B       loc_1001D94
@ ---------------------------------------------------------------------------

loc_1001D96:                            @ CODE XREF: BootLoader_receive_packets:case_default↑j
                BL      BootLoader_send_ack
                STRB.W  R11, [R5]
                B       loc_1001C5E
@ End of function BootLoader_receive_packets

@ ---------------------------------------------------------------------------
off_1001DA0:    .long 0x400FE0F0        @ DATA XREF: BootLoader_detect_hardware+2↑r
@ unsigned int ulPort
ulPort:         .long 0x40005000        @ DATA XREF: BootLoader_detect_hardware+20↑r
off_1001DA8:    .long BootLoader_i2c_write_bytes+1
                                        @ DATA XREF: BootLoader_setup_communication_i2c+2↑r
@ unsigned __int8 *buffer
buffer:         .long response_package_buffer
                                        @ DATA XREF: BootLoader_setup_communication_i2c↑r
                                        @ BootLoader_setup_communication_ssi↑r ...
off_1001DB0:    .long BootLoader_i2c_read_bytes+1
                                        @ DATA XREF: BootLoader_setup_communication_i2c+6↑r
off_1001DB4:    .long BootLoader_i2c_wait_send_done+1
                                        @ DATA XREF: BootLoader_setup_communication_i2c+A↑r
off_1001DB8:    .long BootLoader_ssi_write_bytes+1
                                        @ DATA XREF: BootLoader_setup_communication_ssi+2↑r
off_1001DBC:    .long BootLoader_ssi_read_bytes+1
                                        @ DATA XREF: BootLoader_setup_communication_ssi+6↑r
off_1001DC0:    .long BootLoader_ssi_wait_send_done+1
                                        @ DATA XREF: BootLoader_setup_communication_ssi+A↑r
off_1001DC4:    .long BootLoader_uart_write_bytes+1
                                        @ DATA XREF: BootLoader_setup_communication_uart+2↑r
off_1001DC8:    .long BootLoader_uart_read_bytes+1
                                        @ DATA XREF: BootLoader_setup_communication_uart+6↑r
off_1001DCC:    .long BootLoader_uart_wait_send_done+1
                                        @ DATA XREF: BootLoader_setup_communication_uart+A↑r
off_1001DD0:    .long 0x400FE000        @ DATA XREF: BootLoader_setup_communication+2↑r
                                        @ BootLoader_receive_packets+D4↑r
off_1001DD4:    .long 0x400FD000        @ DATA XREF: BootLoader_receive_packets:loc_1001CC4↑r
dword_1001DD8:  .long 0xA4420004        @ DATA XREF: BootLoader_receive_packets+8E↑r
dword_1001DDC:  .long 0x5FA0004         @ DATA XREF: BootLoader_receive_packets+F6↑r
                                        @ BootLoader_receive_packets+154↑r
off_1001DE0:    .long 0xE000ED0C        @ DATA XREF: BootLoader_receive_packets+F4↑r
                                        @ BootLoader_receive_packets+152↑r

@ =============== S U B R O U T I N E =======================================


@ void __cdecl BootLoader_i2c_write_bytes(const unsigned __int8 *buffer, unsigned int byteCount)
BootLoader_i2c_write_bytes:             @ DATA XREF: BootLoader_setup_communication_i2c+2↑o
                                        @ ROM:off_1001DA8↑o
                SUBS    R1, R1, #1
                IT cc
                BXcc    LR
                LDR     R2, =0x40020000

loc_1001DEC:                            @ CODE XREF: BootLoader_i2c_write_bytes+10↓j
                                        @ BootLoader_i2c_write_bytes+1C↓j
                LDR.W   R3, [R2,#0x804]
                TST.W   R3, #2
                Beq     loc_1001DEC
                LDRB.W  R3, [R0],#1
                STR.W   R3, [R2,#0x808]
                SUBS    R1, R1, #1
                Bcs     loc_1001DEC
                BX      LR
@ End of function BootLoader_i2c_write_bytes


@ =============== S U B R O U T I N E =======================================


@ void BootLoader_i2c_wait_send_done(void)
BootLoader_i2c_wait_send_done:          @ DATA XREF: BootLoader_setup_communication_i2c+A↑o
                                        @ ROM:off_1001DB4↑o
                LDR     R0, =0x40020000

loc_1001E06:                            @ CODE XREF: BootLoader_i2c_wait_send_done+8↓j
                LDR     R1, [R0,#4]
                TST.W   R1, #0x40
                Bne     loc_1001E06
                BX      LR
@ End of function BootLoader_i2c_wait_send_done


@ =============== S U B R O U T I N E =======================================


@ void __cdecl BootLoader_i2c_read_bytes(unsigned __int8 *buffer, unsigned int byteCount)
BootLoader_i2c_read_bytes:              @ DATA XREF: BootLoader_setup_communication_i2c+6↑o
                                        @ ROM:off_1001DB0↑o
                SUBS    R1, R1, #1
                IT cc
                BXcc    LR
                LDR     R2, =0x40020000

loc_1001E18:                            @ CODE XREF: BootLoader_i2c_read_bytes+10↓j
                                        @ BootLoader_i2c_read_bytes+1C↓j
                LDR.W   R3, [R2,#0x804]
                TST.W   R3, #1
                Beq     loc_1001E18
                LDR.W   R3, [R2,#0x808]
                STRB.W  R3, [R0],#1
                SUBS    R1, R1, #1
                Bcs     loc_1001E18
                BX      LR
@ End of function BootLoader_i2c_read_bytes


@ =============== S U B R O U T I N E =======================================


@ void BootLoader_i2c_setup(void)
BootLoader_i2c_setup:                   @ CODE XREF: BootLoader_setup_communication+14↑p
                LDR     R0, =0x40020000
                MOVS    R1, #0x30 @ '0'
                STR     R1, [R0,#0x20]
                MOVS    R1, #0x42 @ 'B'
                STR.W   R1, [R0,#0x800]
                MOVS    R1, #1
                STR.W   R1, [R0,#0x804]
                BX      LR
@ End of function BootLoader_i2c_setup

@ ---------------------------------------------------------------------------
off_1001E44:    .long 0x40020000        @ DATA XREF: BootLoader_i2c_write_bytes+6↑r
                                        @ BootLoader_i2c_wait_send_done↑r ...

@ =============== S U B R O U T I N E =======================================


@ int __fastcall BootLoader_calc_checksum(unsigned __int8 *buffer, unsigned int byteCount)
BootLoader_calc_checksum:               @ CODE XREF: BootLoader_read_package+3E↓p
                                        @ BootLoader_write_package+8↓p
                MOVS    R3, #0
                MOV     R2, R3
                CMP     R1, #0
                Bls     loc_1001E5C

loc_1001E50:                            @ CODE XREF: BootLoader_calc_checksum+12↓j
                LDRB.W  R12, [R0,R2]
                ADDS    R2, R2, #1
                ADD     R3, R12
                CMP     R2, R1
                Bcc     loc_1001E50

loc_1001E5C:                            @ CODE XREF: BootLoader_calc_checksum+6↑j
                UXTB    R0, R3
                BX      LR
@ End of function BootLoader_calc_checksum


@ =============== S U B R O U T I N E =======================================


@ void BootLoader_send_ack(void)
BootLoader_send_ack:                    @ CODE XREF: BootLoader_setup_communication+5C↑p
                                        @ BootLoader_receive_packets+42↑p ...
                LDR     R2, =funcptr_write_bytes
                MOVS    R1, #2
                LDR     R2, [R2]
                LDR     R0, =package_ACK
                BX      R2
@ End of function BootLoader_send_ack


@ =============== S U B R O U T I N E =======================================


@ int __fastcall BootLoader_read_package(unsigned __int8 *buffer, unsigned int *byteCount)
BootLoader_read_package:                @ CODE XREF: BootLoader_receive_packets+26↑p

count           = -0x18
var_14          = -0x14

                PUSH    {R4-R6,LR}
                MOV     R6, R0
                SUB     SP, SP, #8
                MOVS    R0, #0
                LDR     R4, =funcptr_read_bytes
                MOV     R5, R1
                STR     R0, [SP,#0x18+count]

loc_1001E78:                            @ CODE XREF: BootLoader_read_package+1C↓j
                LDR     R2, [R4]
                MOVS    R1, #1
                MOV     R0, SP
                BLX     R2
                LDRB.W  R0, [SP,#0x18+count]
                CMP     R0, #0
                Beq     loc_1001E78
                LDRB.W  R0, [SP,#0x18+count]
                SUBS    R0, R0, #2
                STR     R0, [SP,#0x18+count]
                LDR     R2, [R4]
                MOVS    R1, #1
                ADD     R0, SP, #0x18+var_14
                BLX     R2
                LDR     R2, [R4]
                LDRB.W  R1, [SP,#0x18+count]
                MOV     R0, R6
                BLX     R2
                LDRB.W  R1, [SP,#0x18+count] @ byteCount
                MOV     R0, R6          @ buffer
                BL      BootLoader_calc_checksum
                LDRB.W  R1, [SP,#0x18+var_14]
                CMP     R0, R1
                ITTTT eq
                LDRBeq.W R0, [SP,#0x18+count]
                STReq   R0, [R5]
                MOVeq   R0, #0
                ADDeq   SP, SP, #8
                IT eq
                POPeq   {R4-R6,PC}
                MOVS    R1, #2
                LDR     R2, =funcptr_write_bytes
                LDR     R0, =package_NAK
                LDR     R2, [R2]
                BLX     R2
                MOV.W   R0, #0xFFFFFFFF
                ADD     SP, SP, #8
                POP     {R4-R6,PC}
@ End of function BootLoader_read_package


@ =============== S U B R O U T I N E =======================================


@ int __fastcall BootLoader_write_package(unsigned __int8 *buffer, unsigned int byteCount)
BootLoader_write_package:               @ CODE XREF: BootLoader_receive_packets+144↑p

var_18          = -0x18
anonymous_0     = -0x14
var_10          = -0x10

                PUSH    {R0,R1,R4,R5,LR}
                SUB     SP, SP, #4
                MOV     R5, R0
                LDR     R1, [SP,#0x18+var_10] @ byteCount
                BL      BootLoader_calc_checksum
                STR     R0, [SP,#0x18+var_18]
                LDR     R0, [SP,#0x18+var_10]
                LDR     R4, =funcptr_write_bytes
                ADDS    R0, R0, #2
                STR     R0, [SP,#0x18+var_10]
                LDR     R2, [R4]
                MOVS    R1, #1
                ADD     R0, SP, #0x18+var_10
                BLX     R2
                LDR     R2, [R4]
                MOVS    R1, #1
                MOV     R0, SP
                BLX     R2
                LDR     R0, [SP,#0x18+var_10]
                LDR     R2, [R4]
                SUBS    R1, R0, #2
                MOV     R0, R5
                BLX     R2
                MOVS    R0, #0
                LDR     R4, =funcptr_read_bytes
                STR     R0, [SP,#0x18+var_18]

loc_1001F0A:                            @ CODE XREF: BootLoader_write_package+44↓j
                LDR     R2, [R4]
                MOVS    R1, #1
                MOV     R0, SP
                BLX     R2
                LDRB.W  R0, [SP,#0x18+var_18]
                CMP     R0, #0
                Beq     loc_1001F0A
                LDRB.W  R0, [SP,#0x18+var_18]
                SUBS    R0, #0xCC
                IT ne
                MOVne.W R0, #0xFFFFFFFF
                ADD     SP, SP, #0xC
                POP     {R4,R5,PC}
@ End of function BootLoader_write_package

@ ---------------------------------------------------------------------------
                .short 0
off_1001F2C:    .long package_ACK       @ DATA XREF: BootLoader_send_ack+6↑r
off_1001F30:    .long funcptr_write_bytes
                                        @ DATA XREF: BootLoader_send_ack↑r
                                        @ BootLoader_read_package+5A↑r ...
off_1001F34:    .long funcptr_read_bytes
                                        @ DATA XREF: BootLoader_read_package+8↑r
                                        @ BootLoader_write_package+32↑r
off_1001F38:    .long package_NAK       @ DATA XREF: BootLoader_read_package+5C↑r

@ =============== S U B R O U T I N E =======================================


@ void __cdecl BootLoader_ssi_write_bytes(const unsigned __int8 *buffer, unsigned int byteCount)
BootLoader_ssi_write_bytes:             @ DATA XREF: BootLoader_setup_communication_ssi+2↑o
                                        @ ROM:off_1001DB8↑o

var_14          = -0x14

                PUSH    {R0,R1,R4-R6,LR}
                MOV     R4, R0
                LDR     R0, [SP,#0x18+var_14]
                LDR     R5, =0x40008000
                SUBS    R0, R0, #1
                STR     R0, [SP,#0x18+var_14]
                Bcc     loc_1001F5C

loc_1001F4A:                            @ CODE XREF: BootLoader_ssi_write_bytes+1E↓j
                LDRB.W  R1, [R4],#1
                MOV     R0, R5
                BL      ROM_SSIDataPut
                LDR     R0, [SP,#0x18+var_14]
                SUBS    R0, R0, #1
                STR     R0, [SP,#0x18+var_14]
                Bcs     loc_1001F4A

loc_1001F5C:                            @ CODE XREF: BootLoader_ssi_write_bytes+C↑j
                                        @ BootLoader_ssi_write_bytes+2A↓j
                ADD     R1, SP, #0x18+var_14
                MOV     R0, R5
                BL      ROM_SSIDataGetNonBlocking
                CMP     R0, #0
                Bne     loc_1001F5C
                ADD     SP, SP, #8
                POP     {R4-R6,PC}
@ End of function BootLoader_ssi_write_bytes


@ =============== S U B R O U T I N E =======================================


@ void BootLoader_ssi_wait_send_done(void)
BootLoader_ssi_wait_send_done:          @ DATA XREF: BootLoader_setup_communication_ssi+A↑o
                                        @ ROM:off_1001DC0↑o
                LDR     R0, =0x40008000

loc_1001F6E:                            @ CODE XREF: BootLoader_ssi_wait_send_done+6↓j
                LDR     R1, [R0,#0xC]
                CMP     R1, #0
                Beq     loc_1001F6E

loc_1001F74:                            @ CODE XREF: BootLoader_ssi_wait_send_done+E↓j
                LDR     R1, [R0,#0xC]
                TST.W   R1, #0x10
                Bne     loc_1001F74
                BX      LR
@ End of function BootLoader_ssi_wait_send_done


@ =============== S U B R O U T I N E =======================================


@ void __cdecl BootLoader_ssi_read_bytes(unsigned __int8 *buffer, unsigned int byteCount)
BootLoader_ssi_read_bytes:              @ DATA XREF: BootLoader_setup_communication_ssi+6↑o
                                        @ ROM:off_1001DBC↑o
                LDR     R2, =0x40008000
                MOV.W   R12, #0
                STR.W   R12, [R2,#8]
                SUBS    R1, R1, #1
                IT cc
                BXcc    LR

loc_1001F8E:                            @ CODE XREF: BootLoader_ssi_read_bytes+16↓j
                                        @ BootLoader_ssi_read_bytes+24↓j
                LDR     R3, [R2,#0xC]
                TST.W   R3, #4
                Beq     loc_1001F8E
                LDR     R3, [R2,#8]
                STRB.W  R3, [R0],#1
                STR.W   R12, [R2,#8]
                SUBS    R1, R1, #1
                Bcs     loc_1001F8E
                BX      LR
@ End of function BootLoader_ssi_read_bytes


@ =============== S U B R O U T I N E =======================================


@ void BootLoader_ssi_setup(void)
BootLoader_ssi_setup:                   @ CODE XREF: BootLoader_setup_communication+28↑p
                LDR     R0, =0x40008000
                MOVS    R1, #0xC7
                STR     R1, [R0]
                MOVS    R1, #6
                STR     R1, [R0,#4]
                BX      LR
@ End of function BootLoader_ssi_setup

@ ---------------------------------------------------------------------------
                .short 0
dword_1001FB4:  .long 0x40008000        @ DATA XREF: BootLoader_ssi_write_bytes+6↑r
                                        @ BootLoader_ssi_wait_send_done↑r ...

@ =============== S U B R O U T I N E =======================================


@ void __cdecl BootLoader_uart_write_bytes(const unsigned __int8 *buffer, unsigned int byteCount)
BootLoader_uart_write_bytes:            @ DATA XREF: BootLoader_setup_communication_uart+2↑o
                                        @ ROM:off_1001DC4↑o
                PUSH.W  {R4-R8,LR}
                LDR     R5, =0x4000C000
                MOV     R6, R0
                SUBS    R7, R1, #0
                MOV.W   R4, #0
                Bls     loc_1001FD6

loc_1001FC8:                            @ CODE XREF: BootLoader_uart_write_bytes+1C↓j
                LDRB    R1, [R6,R4]
                MOV     R0, R5
                BL      ROM_UARTCharPut
                ADDS    R4, R4, #1
                CMP     R4, R7
                Bcc     loc_1001FC8

loc_1001FD6:                            @ CODE XREF: BootLoader_uart_write_bytes+E↑j
                                        @ BootLoader_uart_write_bytes+24↓j
                LDR     R0, [R5,#0x18]
                TST.W   R0, #0x80
                Beq     loc_1001FD6

loc_1001FDE:                            @ CODE XREF: BootLoader_uart_write_bytes+2C↓j
                LDR     R0, [R5,#0x18]
                TST.W   R0, #8
                Bne     loc_1001FDE
                POP.W   {R4-R8,PC}
@ End of function BootLoader_uart_write_bytes


@ =============== S U B R O U T I N E =======================================


@ void BootLoader_uart_wait_send_done(void)
BootLoader_uart_wait_send_done:         @ DATA XREF: BootLoader_setup_communication_uart+A↑o
                                        @ ROM:off_1001DCC↑o
                LDR     R0, =0x4000C000

loc_1001FEC:                            @ CODE XREF: BootLoader_uart_wait_send_done+8↓j
                LDR     R1, [R0,#0x18]
                TST.W   R1, #0x80
                Beq     loc_1001FEC

loc_1001FF4:                            @ CODE XREF: BootLoader_uart_wait_send_done+10↓j
                LDR     R1, [R0,#0x18]
                TST.W   R1, #8
                Bne     loc_1001FF4
                BX      LR
@ End of function BootLoader_uart_wait_send_done


@ =============== S U B R O U T I N E =======================================


@ void __cdecl BootLoader_uart_read_bytes(unsigned __int8 *buffer, unsigned int byteCount)
BootLoader_uart_read_bytes:             @ DATA XREF: BootLoader_setup_communication_uart+6↑o
                                        @ ROM:off_1001DC8↑o
                PUSH.W  {R4-R8,LR}
                MOV     R5, R0
                SUBS    R6, R1, #0
                MOV.W   R4, #0
                IT ls
                POPls.W {R4-R8,PC}
                LDR     R7, =0x4000C000

loc_1002012:                            @ CODE XREF: BootLoader_uart_read_bytes+20↓j
                MOV     R0, R7
                BL      ROM_UARTCharGet
                STRB    R0, [R5,R4]
                ADDS    R4, R4, #1
                CMP     R4, R6
                Bcc     loc_1002012
                POP.W   {R4-R8,PC}
@ End of function BootLoader_uart_read_bytes


@ =============== S U B R O U T I N E =======================================


@ void __fastcall BootLoader_uart_setup(int a1)
BootLoader_uart_setup:                  @ CODE XREF: BootLoader_setup_communication+54↑p
                LDR     R1, =0x4000C000
                ASRS    R2, R0, #6
                STR     R2, [R1,#0x24]
                AND.W   R0, R0, #0x3F
                STR     R0, [R1,#0x28]
                MOVS    R0, #0x70 @ 'p'
                STR     R0, [R1,#0x2C]
                LDR     R0, [R1,#0x30]
                MOVW    R2, #0x301
                ORRS    R0, R2
                STR     R0, [R1,#0x30]
                BX      LR
@ End of function BootLoader_uart_setup

@ ---------------------------------------------------------------------------
dword_1002040:  .long 0x4000C000        @ DATA XREF: BootLoader_uart_write_bytes+4↑r
                                        @ BootLoader_uart_wait_send_done↑r ...

@ =============== S U B R O U T I N E =======================================


@ void BootLoader_disable_irqs(void)
BootLoader_disable_irqs:                @ CODE XREF: ROM_IntMasterDisable↑j
                CPSID   I
                BX      LR
@ End of function BootLoader_disable_irqs


@ =============== S U B R O U T I N E =======================================


@ void BootLoader_enable_irqs(void)
BootLoader_enable_irqs:                 @ CODE XREF: ROM_IntMasterEnable↑j
                CPSIE   I
                BX      LR
@ End of function BootLoader_enable_irqs


@ =============== S U B R O U T I N E =======================================


@ void BootLoader_wait_for_interrupt(void)
BootLoader_wait_for_interrupt:          @ CODE XREF: ROM_SysCtlSleep↑j
                                        @ ROM_SysCtlDeepSleep+C↑p
                WFI
                BX      LR
@ End of function BootLoader_wait_for_interrupt

@ ---------------------------------------------------------------------------
@ unsigned int *FLASH_REG_1002050[4]
FLASH_REG_1002050:.long 0x400FE134, 0x400FE404, 0x400FE408, 0x400FE40C
                                        @ DATA XREF: ROM_FlashProtectGet+C↑o
                                        @ ROM_FlashProtectSet+14↑o ...
@ unsigned int *FLASH_REG_1002060[4]
FLASH_REG_1002060:.long 0x400FE130, 0x400FE204, 0x400FE208, 0x400FE20C
                                        @ DATA XREF: ROM_FlashProtectGet↑o
                                        @ ROM_FlashProtectSet+C↑o ...
@ unsigned int PriorityGroups[8]
PriorityGroups: .long 0x700, 0x600, 0x500, 0x400, 0x300, 0x200, 0x100
                                        @ DATA XREF: ROM_IntPriorityGroupingGet+4↑o
                                        @ ROM_IntPriorityGroupingSet↑o ...
                .long 0
@ unsigned int *dword_1002090[15]
dword_1002090:  .long 0, 0xE000ED18, 0xE000ED1C, 0xE000ED20, 0xE000E400
                                        @ DATA XREF: ROM_IntPriorityGet+4↑o
                                        @ ROM_IntPrioritySet↑o ...
                .long 0xE000E404, 0xE000E408, 0xE000E40C, 0xE000E410, 0xE000E414
                .long 0xE000E418, 0xE000E41C, 0xE000E420, 0xE000E424, 0xE000E428
@ unsigned int *SYSCTL_DC_REGS[4]
SYSCTL_DC_REGS: .long 0x400FE010, 0x400FE014, 0x400FE01C, 0x400FE010
                                        @ DATA XREF: ROM_SysCtlPeripheralPresent+2↑o
                                        @ ROM:off_1001674↑o
@ unsigned int *SYSCTL_SRCR_REGS[3]
SYSCTL_SRCR_REGS:.long 0x400FE040, 0x400FE044, 0x400FE048
                                        @ DATA XREF: ROM_SysCtlPeripheralReset+4↑o
                                        @ ROM:off_1001678↑o
@ unsigned int *SYSCTL_RCGC_REGS[3]
SYSCTL_RCGC_REGS:.long 0x400FE100, 0x400FE104, 0x400FE108
                                        @ DATA XREF: ROM_SysCtlPeripheralEnable↑o
                                        @ ROM_SysCtlPeripheralDisable↑o ...
@ unsigned int *SYSCTL_SCGC_REGS[3]
SYSCTL_SCGC_REGS:.long 0x400FE110, 0x400FE114, 0x400FE118
                                        @ DATA XREF: ROM_SysCtlPeripheralSleepEnable↑o
                                        @ ROM_SysCtlPeripheralSleepDisable↑o ...
@ unsigned int *SYSCTL_DCGC_REGS[3]
SYSCTL_DCGC_REGS:.long 0x400FE120, 0x400FE124, 0x400FE128
                                        @ DATA XREF: ROM_SysCtlPeripheralDeepSleepEnable↑o
                                        @ ROM_SysCtlPeripheralDeepSleepDisable↑o ...
@ unsigned int sysclk_table[23]
sysclk_table:   .long 1000000, 1843200, 2000000, 2457600, 3579545, 3686400
                                        @ DATA XREF: ROM_SysCtlClockGet:loc_100154E↑o
                                        @ ROM:off_10016A8↑o
                .long 4000000, 4096000, 4915200, 5000000, 5120000, 6000000
                .long 6144000, 7372800, 8000000, 8192000, 10000000, 12000000
                .long 12288000, 13560000, 14318180, 16000000, 16384000
@ unsigned __int8 package_ACK[2]
package_ACK:    .byte 0, 0xCC           @ DATA XREF: BootLoader_send_ack+6↑o
                                        @ ROM:off_1001F2C↑o
@ unsigned __int8 package_NAK[2]
package_NAK:    .byte 0, 0x33           @ DATA XREF: BootLoader_read_package+5C↑o
                                        @ ROM:off_1001F38↑o
                .ds.b 0xA94, 0

@ ===========================================================================

@ Segment type: Regular
                .section RAM@
                @ .org 0x20000000
@ void (*VTOR_TABLE_IN_SRAM[38])(void)
VTOR_TABLE_IN_SRAM:.ds.b 0x44           @ DATA XREF: init_ram_and_vector_table↑o
                                        @ init_ram_and_vector_table:loc_10006AA↑w ...
@ unsigned int SysTick_value_count
SysTick_value_count:.ds.b 4             @ DATA XREF: BootLoader_SysTick_Handler+6↑o
                                        @ BootLoader_SysTick_Handler+8↑r ...
@ int SysTick_value_array[20]
SysTick_value_array:.ds.b 0x50          @ DATA XREF: BootLoader_SysTick_Handler+18↑o
                                        @ BootLoader_hardware_test+82↑o ...
@ unsigned __int8 response_package_buffer[4]
response_package_buffer:.ds.b 4         @ DATA XREF: BootLoader_setup_communication_i2c↑o
                                        @ BootLoader_setup_communication_ssi↑o ...
@ void (__cdecl *funcptr_write_bytes)(const unsigned __int8 *buffer, unsigned int byteCount)
funcptr_write_bytes:.ds.b 4             @ DATA XREF: BootLoader_setup_communication_i2c+4↑w
                                        @ BootLoader_setup_communication_ssi+4↑w ...
@ void (__cdecl *funcptr_read_bytes)(unsigned __int8 *buffer, unsigned int byteCount)
funcptr_read_bytes:.ds.b 4              @ DATA XREF: BootLoader_setup_communication_i2c+8↑w
                                        @ BootLoader_setup_communication_ssi+8↑w ...
@ void (*funcptr_wait_send_done)(void)
funcptr_wait_send_done:.ds.b 4          @ DATA XREF: BootLoader_setup_communication_i2c+C↑w
                                        @ BootLoader_setup_communication_ssi+C↑w ...
program_size:   .ds.b 4                 @ DATA XREF: BootLoader_receive_packets+1E↑w
                                        @ BootLoader_receive_packets+4E↑w ...
@ unsigned int program_address
program_address:.ds.b 4                 @ DATA XREF: BootLoader_receive_packets+5E↑w
                                        @ BootLoader_receive_packets+6C↑r ...
                .ds.b 1
                .ds.b 1
                .ds.b 1
@ unsigned __int8 package_buffer[16]
package_buffer: .ds.b 0x10              @ DATA XREF: BootLoader_receive_packets+2E↑r
                .ds.b 0x73D
stack_top:      .ds.b 0x800             @ DATA XREF: ROM:ROM_BASE↑o

                .end
